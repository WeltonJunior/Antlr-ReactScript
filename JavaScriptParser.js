// Generated from JavaScriptParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import JavaScriptParserListener from './JavaScriptParserListener.js';
import JavaScriptParserVisitor from './JavaScriptParserVisitor.js';

import JavaScriptParserBase from './JavaScriptParserBase.js';

const serializedATN = [4,1,150,1184,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,1,0,3,0,190,8,0,1,0,3,0,193,8,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
219,8,2,1,3,1,3,3,3,223,8,3,1,3,1,3,1,4,4,4,228,8,4,11,4,12,4,229,1,5,1,
5,1,5,1,6,3,6,236,8,6,1,6,1,6,3,6,240,8,6,1,6,1,6,1,6,1,6,1,6,3,6,247,8,
6,1,7,1,7,1,7,1,7,5,7,253,8,7,10,7,12,7,256,9,7,1,7,1,7,3,7,260,8,7,3,7,
262,8,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,3,9,271,8,9,1,9,1,9,3,9,275,8,9,1,10,
1,10,1,10,1,11,1,11,1,11,3,11,283,8,11,1,12,1,12,1,12,3,12,288,8,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,3,12,297,8,12,1,13,1,13,1,13,1,13,1,13,1,13,
3,13,305,8,13,1,13,1,13,3,13,309,8,13,1,14,1,14,1,14,3,14,314,8,14,1,15,
1,15,1,15,1,16,1,16,1,16,1,16,5,16,323,8,16,10,16,12,16,326,9,16,1,17,1,
17,1,17,3,17,331,8,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,3,20,346,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,366,8,21,1,21,1,21,3,21,
370,8,21,1,21,1,21,3,21,374,8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,382,
8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,391,8,21,1,21,1,21,1,21,3,21,
396,8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,404,8,21,1,22,1,22,1,22,3,22,
409,8,22,1,23,1,23,1,23,3,23,414,8,23,1,23,1,23,1,24,1,24,1,24,3,24,421,
8,24,1,24,1,24,1,25,1,25,1,25,3,25,428,8,25,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,3,25,437,8,25,1,26,1,26,1,26,3,26,442,8,26,1,26,1,26,1,27,1,27,1,27,
1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,3,29,460,8,29,1,29,
1,29,3,29,464,8,29,3,29,466,8,29,1,29,1,29,1,30,4,30,471,8,30,11,30,12,30,
472,1,31,1,31,1,31,1,31,3,31,479,8,31,1,32,1,32,1,32,3,32,484,8,32,1,33,
1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,499,8,35,
1,35,3,35,502,8,35,1,36,1,36,1,36,3,36,507,8,36,1,36,3,36,510,8,36,1,36,
1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,3,39,521,8,39,1,39,1,39,3,39,525,
8,39,1,39,1,39,1,39,3,39,530,8,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
1,40,1,41,1,41,3,41,543,8,41,1,41,1,41,5,41,547,8,41,10,41,12,41,550,9,41,
1,41,1,41,1,42,1,42,1,42,1,42,5,42,558,8,42,10,42,12,42,561,9,42,1,42,1,
42,1,42,1,42,1,42,1,42,3,42,569,8,42,1,42,1,42,3,42,573,8,42,1,42,1,42,1,
42,1,42,3,42,579,8,42,1,43,3,43,582,8,43,1,43,3,43,585,8,43,1,43,1,43,1,
43,3,43,590,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,598,8,43,1,43,3,43,601,
8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,611,8,43,1,43,3,43,614,
8,43,1,43,1,43,1,43,3,43,619,8,43,1,43,1,43,1,43,1,43,1,43,3,43,626,8,43,
1,44,1,44,1,44,5,44,631,8,44,10,44,12,44,634,9,44,1,44,1,44,3,44,638,8,44,
1,44,3,44,641,8,44,1,45,1,45,1,45,3,45,646,8,45,1,46,1,46,1,46,1,47,3,47,
652,8,47,1,48,4,48,655,8,48,11,48,12,48,656,1,49,1,49,1,49,1,49,1,50,5,50,
664,8,50,10,50,12,50,667,9,50,1,50,3,50,670,8,50,1,50,4,50,673,8,50,11,50,
12,50,674,1,50,5,50,678,8,50,10,50,12,50,681,9,50,1,50,5,50,684,8,50,10,
50,12,50,687,9,50,1,51,3,51,690,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,3,52,705,8,52,1,52,3,52,708,8,52,1,52,1,52,
1,52,3,52,713,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,736,8,52,1,52,3,52,
739,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,748,8,53,1,54,1,54,1,54,
1,54,5,54,754,8,54,10,54,12,54,757,9,54,1,54,3,54,760,8,54,3,54,762,8,54,
1,54,1,54,1,55,3,55,767,8,55,1,55,1,55,3,55,771,8,55,1,56,3,56,774,8,56,
1,56,1,56,1,56,3,56,779,8,56,1,56,5,56,782,8,56,10,56,12,56,785,9,56,1,57,
1,57,1,57,1,57,3,57,791,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,840,8,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,3,57,904,8,57,1,57,1,57,3,57,908,8,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,5,57,921,8,57,10,57,12,57,924,9,57,1,58,4,58,927,
8,58,11,58,12,58,928,1,59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,938,8,60,1,
61,1,61,1,61,3,61,943,8,61,1,61,1,61,1,62,1,62,1,62,3,62,950,8,62,1,62,1,
62,1,63,1,63,1,63,1,63,1,64,3,64,959,8,64,1,64,1,64,3,64,963,8,64,1,64,3,
64,966,8,64,5,64,968,8,64,10,64,12,64,971,9,64,1,65,1,65,1,66,1,66,1,66,
1,67,1,67,1,67,1,68,1,68,3,68,983,8,68,1,68,1,68,3,68,987,8,68,3,68,989,
8,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,3,70,1001,8,70,1,
71,1,71,1,72,1,72,1,72,3,72,1008,8,72,1,73,1,73,1,73,3,73,1013,8,73,1,74,
1,74,1,74,1,74,5,74,1019,8,74,10,74,12,74,1022,9,74,1,74,3,74,1025,8,74,
3,74,1027,8,74,1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,3,77,1039,
8,77,1,77,1,77,3,77,1043,8,77,1,77,1,77,3,77,1047,8,77,1,77,1,77,1,77,1,
77,1,77,1,77,3,77,1055,8,77,1,77,1,77,1,77,1,77,3,77,1061,8,77,1,78,1,78,
1,78,3,78,1066,8,78,1,78,3,78,1069,8,78,1,79,1,79,1,79,1,79,1,79,3,79,1076,
8,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1087,8,81,1,82,1,
82,5,82,1091,8,82,10,82,12,82,1094,9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,
83,3,83,1103,8,83,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,
1,87,1,88,1,88,3,88,1119,8,88,1,89,1,89,1,90,1,90,1,90,3,90,1126,8,90,1,
91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
1,91,1,91,3,91,1174,8,91,1,92,1,92,1,93,1,93,1,93,1,93,3,93,1182,8,93,1,
93,0,1,114,94,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
166,168,170,172,174,176,178,180,182,184,186,0,13,2,0,96,96,115,115,1,0,22,
24,1,0,18,19,1,0,28,30,1,0,31,34,1,0,35,38,3,0,2,2,132,132,144,144,3,0,7,
7,136,136,146,146,1,0,44,55,1,0,59,63,1,0,64,67,3,0,104,104,108,108,116,
116,1,0,107,108,1349,0,189,1,0,0,0,2,196,1,0,0,0,4,218,1,0,0,0,6,220,1,0,
0,0,8,227,1,0,0,0,10,231,1,0,0,0,12,246,1,0,0,0,14,248,1,0,0,0,16,265,1,
0,0,0,18,270,1,0,0,0,20,276,1,0,0,0,22,279,1,0,0,0,24,296,1,0,0,0,26,308,
1,0,0,0,28,313,1,0,0,0,30,315,1,0,0,0,32,318,1,0,0,0,34,327,1,0,0,0,36,332,
1,0,0,0,38,334,1,0,0,0,40,338,1,0,0,0,42,403,1,0,0,0,44,408,1,0,0,0,46,410,
1,0,0,0,48,417,1,0,0,0,50,436,1,0,0,0,52,438,1,0,0,0,54,445,1,0,0,0,56,451,
1,0,0,0,58,457,1,0,0,0,60,470,1,0,0,0,62,474,1,0,0,0,64,480,1,0,0,0,66,485,
1,0,0,0,68,489,1,0,0,0,70,494,1,0,0,0,72,503,1,0,0,0,74,513,1,0,0,0,76,516,
1,0,0,0,78,520,1,0,0,0,80,536,1,0,0,0,82,542,1,0,0,0,84,578,1,0,0,0,86,625,
1,0,0,0,88,640,1,0,0,0,90,642,1,0,0,0,92,647,1,0,0,0,94,651,1,0,0,0,96,654,
1,0,0,0,98,658,1,0,0,0,100,665,1,0,0,0,102,689,1,0,0,0,104,738,1,0,0,0,106,
747,1,0,0,0,108,749,1,0,0,0,110,766,1,0,0,0,112,773,1,0,0,0,114,839,1,0,
0,0,116,926,1,0,0,0,118,930,1,0,0,0,120,937,1,0,0,0,122,939,1,0,0,0,124,
946,1,0,0,0,126,953,1,0,0,0,128,958,1,0,0,0,130,972,1,0,0,0,132,974,1,0,
0,0,134,977,1,0,0,0,136,988,1,0,0,0,138,990,1,0,0,0,140,1000,1,0,0,0,142,
1002,1,0,0,0,144,1007,1,0,0,0,146,1012,1,0,0,0,148,1014,1,0,0,0,150,1030,
1,0,0,0,152,1032,1,0,0,0,154,1060,1,0,0,0,156,1068,1,0,0,0,158,1075,1,0,
0,0,160,1077,1,0,0,0,162,1086,1,0,0,0,164,1088,1,0,0,0,166,1102,1,0,0,0,
168,1104,1,0,0,0,170,1106,1,0,0,0,172,1108,1,0,0,0,174,1112,1,0,0,0,176,
1118,1,0,0,0,178,1120,1,0,0,0,180,1125,1,0,0,0,182,1173,1,0,0,0,184,1175,
1,0,0,0,186,1181,1,0,0,0,188,190,5,1,0,0,189,188,1,0,0,0,189,190,1,0,0,0,
190,192,1,0,0,0,191,193,3,96,48,0,192,191,1,0,0,0,192,193,1,0,0,0,193,194,
1,0,0,0,194,195,5,0,0,1,195,1,1,0,0,0,196,197,3,4,2,0,197,3,1,0,0,0,198,
219,3,6,3,0,199,219,3,30,15,0,200,219,3,10,5,0,201,219,3,24,12,0,202,219,
3,36,18,0,203,219,3,80,40,0,204,219,3,38,19,0,205,219,3,40,20,0,206,219,
3,42,21,0,207,219,3,46,23,0,208,219,3,48,24,0,209,219,3,50,25,0,210,219,
3,52,26,0,211,219,3,54,27,0,212,219,3,66,33,0,213,219,3,56,28,0,214,219,
3,68,34,0,215,219,3,70,35,0,216,219,3,76,38,0,217,219,3,78,39,0,218,198,
1,0,0,0,218,199,1,0,0,0,218,200,1,0,0,0,218,201,1,0,0,0,218,202,1,0,0,0,
218,203,1,0,0,0,218,204,1,0,0,0,218,205,1,0,0,0,218,206,1,0,0,0,218,207,
1,0,0,0,218,208,1,0,0,0,218,209,1,0,0,0,218,210,1,0,0,0,218,211,1,0,0,0,
218,212,1,0,0,0,218,213,1,0,0,0,218,214,1,0,0,0,218,215,1,0,0,0,218,216,
1,0,0,0,218,217,1,0,0,0,219,5,1,0,0,0,220,222,5,7,0,0,221,223,3,8,4,0,222,
221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,5,8,0,0,225,7,1,0,0,
0,226,228,3,4,2,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,
1,0,0,0,230,9,1,0,0,0,231,232,5,103,0,0,232,233,3,12,6,0,233,11,1,0,0,0,
234,236,3,16,8,0,235,234,1,0,0,0,235,236,1,0,0,0,236,239,1,0,0,0,237,240,
3,18,9,0,238,240,3,14,7,0,239,237,1,0,0,0,239,238,1,0,0,0,240,241,1,0,0,
0,241,242,3,20,10,0,242,243,3,186,93,0,243,247,1,0,0,0,244,245,5,117,0,0,
245,247,3,186,93,0,246,235,1,0,0,0,246,244,1,0,0,0,247,13,1,0,0,0,248,254,
5,7,0,0,249,250,3,22,11,0,250,251,5,10,0,0,251,253,1,0,0,0,252,249,1,0,0,
0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,261,1,0,0,0,256,254,
1,0,0,0,257,259,3,22,11,0,258,260,5,10,0,0,259,258,1,0,0,0,259,260,1,0,0,
0,260,262,1,0,0,0,261,257,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,264,
5,8,0,0,264,15,1,0,0,0,265,266,3,22,11,0,266,267,5,10,0,0,267,17,1,0,0,0,
268,271,5,22,0,0,269,271,3,176,88,0,270,268,1,0,0,0,270,269,1,0,0,0,271,
274,1,0,0,0,272,273,5,94,0,0,273,275,3,176,88,0,274,272,1,0,0,0,274,275,
1,0,0,0,275,19,1,0,0,0,276,277,5,95,0,0,277,278,5,117,0,0,278,21,1,0,0,0,
279,282,3,176,88,0,280,281,5,94,0,0,281,283,3,176,88,0,282,280,1,0,0,0,282,
283,1,0,0,0,283,23,1,0,0,0,284,287,5,102,0,0,285,288,3,26,13,0,286,288,3,
28,14,0,287,285,1,0,0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,290,3,186,93,
0,290,297,1,0,0,0,291,292,5,102,0,0,292,293,5,88,0,0,293,294,3,114,57,0,
294,295,3,186,93,0,295,297,1,0,0,0,296,284,1,0,0,0,296,291,1,0,0,0,297,25,
1,0,0,0,298,299,3,18,9,0,299,300,3,20,10,0,300,301,3,186,93,0,301,309,1,
0,0,0,302,304,3,14,7,0,303,305,3,20,10,0,304,303,1,0,0,0,304,305,1,0,0,0,
305,306,1,0,0,0,306,307,3,186,93,0,307,309,1,0,0,0,308,298,1,0,0,0,308,302,
1,0,0,0,309,27,1,0,0,0,310,314,3,30,15,0,311,314,3,80,40,0,312,314,3,78,
39,0,313,310,1,0,0,0,313,311,1,0,0,0,313,312,1,0,0,0,314,29,1,0,0,0,315,
316,3,32,16,0,316,317,3,186,93,0,317,31,1,0,0,0,318,319,3,44,22,0,319,324,
3,34,17,0,320,321,5,10,0,0,321,323,3,34,17,0,322,320,1,0,0,0,323,326,1,0,
0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,33,1,0,0,0,326,324,1,0,0,0,327,330,
3,146,73,0,328,329,5,11,0,0,329,331,3,114,57,0,330,328,1,0,0,0,330,331,1,
0,0,0,331,35,1,0,0,0,332,333,5,9,0,0,333,37,1,0,0,0,334,335,4,19,0,0,335,
336,3,112,56,0,336,337,3,186,93,0,337,39,1,0,0,0,338,339,5,89,0,0,339,340,
5,5,0,0,340,341,3,112,56,0,341,342,5,6,0,0,342,345,3,4,2,0,343,344,5,73,
0,0,344,346,3,4,2,0,345,343,1,0,0,0,345,346,1,0,0,0,346,41,1,0,0,0,347,348,
5,69,0,0,348,349,3,4,2,0,349,350,5,83,0,0,350,351,5,5,0,0,351,352,3,112,
56,0,352,353,5,6,0,0,353,354,3,186,93,0,354,404,1,0,0,0,355,356,5,83,0,0,
356,357,5,5,0,0,357,358,3,112,56,0,358,359,5,6,0,0,359,360,3,4,2,0,360,404,
1,0,0,0,361,362,5,81,0,0,362,365,5,5,0,0,363,366,3,112,56,0,364,366,3,32,
16,0,365,363,1,0,0,0,365,364,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,
369,5,9,0,0,368,370,3,112,56,0,369,368,1,0,0,0,369,370,1,0,0,0,370,371,1,
0,0,0,371,373,5,9,0,0,372,374,3,112,56,0,373,372,1,0,0,0,373,374,1,0,0,0,
374,375,1,0,0,0,375,376,5,6,0,0,376,404,3,4,2,0,377,378,5,81,0,0,378,381,
5,5,0,0,379,382,3,114,57,0,380,382,3,32,16,0,381,379,1,0,0,0,381,380,1,0,
0,0,382,383,1,0,0,0,383,384,5,92,0,0,384,385,3,112,56,0,385,386,5,6,0,0,
386,387,3,4,2,0,387,404,1,0,0,0,388,390,5,81,0,0,389,391,5,105,0,0,390,389,
1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,395,5,5,0,0,393,396,3,114,57,
0,394,396,3,32,16,0,395,393,1,0,0,0,395,394,1,0,0,0,396,397,1,0,0,0,397,
398,3,178,89,0,398,399,4,21,1,0,399,400,3,112,56,0,400,401,5,6,0,0,401,402,
3,4,2,0,402,404,1,0,0,0,403,347,1,0,0,0,403,355,1,0,0,0,403,361,1,0,0,0,
403,377,1,0,0,0,403,388,1,0,0,0,404,43,1,0,0,0,405,409,5,75,0,0,406,409,
3,184,92,0,407,409,5,101,0,0,408,405,1,0,0,0,408,406,1,0,0,0,408,407,1,0,
0,0,409,45,1,0,0,0,410,413,5,80,0,0,411,412,4,23,2,0,412,414,3,178,89,0,
413,411,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,3,186,93,0,416,47,
1,0,0,0,417,420,5,68,0,0,418,419,4,24,3,0,419,421,3,178,89,0,420,418,1,0,
0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,3,186,93,0,423,49,1,0,0,0,424,
427,5,78,0,0,425,426,4,25,4,0,426,428,3,112,56,0,427,425,1,0,0,0,427,428,
1,0,0,0,428,429,1,0,0,0,429,437,3,186,93,0,430,431,5,78,0,0,431,432,5,5,
0,0,432,433,3,116,58,0,433,434,5,6,0,0,434,435,3,186,93,0,435,437,1,0,0,
0,436,424,1,0,0,0,436,430,1,0,0,0,437,51,1,0,0,0,438,441,7,0,0,0,439,440,
4,26,5,0,440,442,3,112,56,0,441,439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,
0,0,443,444,3,186,93,0,444,53,1,0,0,0,445,446,5,87,0,0,446,447,5,5,0,0,447,
448,3,112,56,0,448,449,5,6,0,0,449,450,3,4,2,0,450,55,1,0,0,0,451,452,5,
82,0,0,452,453,5,5,0,0,453,454,3,112,56,0,454,455,5,6,0,0,455,456,3,58,29,
0,456,57,1,0,0,0,457,459,5,7,0,0,458,460,3,60,30,0,459,458,1,0,0,0,459,460,
1,0,0,0,460,465,1,0,0,0,461,463,3,64,32,0,462,464,3,60,30,0,463,462,1,0,
0,0,463,464,1,0,0,0,464,466,1,0,0,0,465,461,1,0,0,0,465,466,1,0,0,0,466,
467,1,0,0,0,467,468,5,8,0,0,468,59,1,0,0,0,469,471,3,62,31,0,470,469,1,0,
0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,61,1,0,0,0,474,475,
5,72,0,0,475,476,3,112,56,0,476,478,5,13,0,0,477,479,3,8,4,0,478,477,1,0,
0,0,478,479,1,0,0,0,479,63,1,0,0,0,480,481,5,88,0,0,481,483,5,13,0,0,482,
484,3,8,4,0,483,482,1,0,0,0,483,484,1,0,0,0,484,65,1,0,0,0,485,486,3,178,
89,0,486,487,5,13,0,0,487,488,3,4,2,0,488,67,1,0,0,0,489,490,5,90,0,0,490,
491,4,34,6,0,491,492,3,112,56,0,492,493,3,186,93,0,493,69,1,0,0,0,494,495,
5,93,0,0,495,501,3,6,3,0,496,498,3,72,36,0,497,499,3,74,37,0,498,497,1,0,
0,0,498,499,1,0,0,0,499,502,1,0,0,0,500,502,3,74,37,0,501,496,1,0,0,0,501,
500,1,0,0,0,502,71,1,0,0,0,503,509,5,76,0,0,504,506,5,5,0,0,505,507,3,146,
73,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,5,6,0,0,509,
504,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,3,6,3,0,512,73,1,0,0,
0,513,514,5,77,0,0,514,515,3,6,3,0,515,75,1,0,0,0,516,517,5,84,0,0,517,518,
3,186,93,0,518,77,1,0,0,0,519,521,5,104,0,0,520,519,1,0,0,0,520,521,1,0,
0,0,521,522,1,0,0,0,522,524,5,85,0,0,523,525,5,22,0,0,524,523,1,0,0,0,524,
525,1,0,0,0,525,526,1,0,0,0,526,527,3,178,89,0,527,529,5,5,0,0,528,530,3,
88,44,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,5,6,0,0,
532,533,5,7,0,0,533,534,3,94,47,0,534,535,5,8,0,0,535,79,1,0,0,0,536,537,
5,97,0,0,537,538,3,178,89,0,538,539,3,82,41,0,539,81,1,0,0,0,540,541,5,99,
0,0,541,543,3,114,57,0,542,540,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,
548,5,7,0,0,545,547,3,84,42,0,546,545,1,0,0,0,547,550,1,0,0,0,548,546,1,
0,0,0,548,549,1,0,0,0,549,551,1,0,0,0,550,548,1,0,0,0,551,552,5,8,0,0,552,
83,1,0,0,0,553,558,5,114,0,0,554,555,4,42,7,0,555,558,3,178,89,0,556,558,
5,104,0,0,557,553,1,0,0,0,557,554,1,0,0,0,557,556,1,0,0,0,558,561,1,0,0,
0,559,557,1,0,0,0,559,560,1,0,0,0,560,568,1,0,0,0,561,559,1,0,0,0,562,569,
3,86,43,0,563,564,3,146,73,0,564,565,5,11,0,0,565,566,3,148,74,0,566,567,
5,9,0,0,567,569,1,0,0,0,568,562,1,0,0,0,568,563,1,0,0,0,569,579,1,0,0,0,
570,579,3,36,18,0,571,573,5,27,0,0,572,571,1,0,0,0,572,573,1,0,0,0,573,574,
1,0,0,0,574,575,3,106,53,0,575,576,5,11,0,0,576,577,3,114,57,0,577,579,1,
0,0,0,578,559,1,0,0,0,578,570,1,0,0,0,578,572,1,0,0,0,579,85,1,0,0,0,580,
582,5,22,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,585,5,27,
0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,3,106,53,0,587,
589,5,5,0,0,588,590,3,88,44,0,589,588,1,0,0,0,589,590,1,0,0,0,590,591,1,
0,0,0,591,592,5,6,0,0,592,593,5,7,0,0,593,594,3,94,47,0,594,595,5,8,0,0,
595,626,1,0,0,0,596,598,5,22,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,600,
1,0,0,0,599,601,5,27,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,
602,603,3,172,86,0,603,604,5,5,0,0,604,605,5,6,0,0,605,606,5,7,0,0,606,607,
3,94,47,0,607,608,5,8,0,0,608,626,1,0,0,0,609,611,5,22,0,0,610,609,1,0,0,
0,610,611,1,0,0,0,611,613,1,0,0,0,612,614,5,27,0,0,613,612,1,0,0,0,613,614,
1,0,0,0,614,615,1,0,0,0,615,616,3,174,87,0,616,618,5,5,0,0,617,619,3,88,
44,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,621,5,6,0,0,621,
622,5,7,0,0,622,623,3,94,47,0,623,624,5,8,0,0,624,626,1,0,0,0,625,581,1,
0,0,0,625,597,1,0,0,0,625,610,1,0,0,0,626,87,1,0,0,0,627,632,3,90,45,0,628,
629,5,10,0,0,629,631,3,90,45,0,630,628,1,0,0,0,631,634,1,0,0,0,632,630,1,
0,0,0,632,633,1,0,0,0,633,637,1,0,0,0,634,632,1,0,0,0,635,636,5,10,0,0,636,
638,3,92,46,0,637,635,1,0,0,0,637,638,1,0,0,0,638,641,1,0,0,0,639,641,3,
92,46,0,640,627,1,0,0,0,640,639,1,0,0,0,641,89,1,0,0,0,642,645,3,146,73,
0,643,644,5,11,0,0,644,646,3,114,57,0,645,643,1,0,0,0,645,646,1,0,0,0,646,
91,1,0,0,0,647,648,5,14,0,0,648,649,3,114,57,0,649,93,1,0,0,0,650,652,3,
96,48,0,651,650,1,0,0,0,651,652,1,0,0,0,652,95,1,0,0,0,653,655,3,2,1,0,654,
653,1,0,0,0,655,656,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,97,1,0,0,
0,658,659,5,3,0,0,659,660,3,100,50,0,660,661,5,4,0,0,661,99,1,0,0,0,662,
664,5,10,0,0,663,662,1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,
0,0,666,669,1,0,0,0,667,665,1,0,0,0,668,670,3,102,51,0,669,668,1,0,0,0,669,
670,1,0,0,0,670,679,1,0,0,0,671,673,5,10,0,0,672,671,1,0,0,0,673,674,1,0,
0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,678,3,102,51,0,677,
672,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,685,1,0,
0,0,681,679,1,0,0,0,682,684,5,10,0,0,683,682,1,0,0,0,684,687,1,0,0,0,685,
683,1,0,0,0,685,686,1,0,0,0,686,101,1,0,0,0,687,685,1,0,0,0,688,690,5,14,
0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,3,114,57,0,692,
103,1,0,0,0,693,694,3,106,53,0,694,695,5,13,0,0,695,696,3,114,57,0,696,739,
1,0,0,0,697,698,5,3,0,0,698,699,3,114,57,0,699,700,5,4,0,0,700,701,5,13,
0,0,701,702,3,114,57,0,702,739,1,0,0,0,703,705,5,104,0,0,704,703,1,0,0,0,
704,705,1,0,0,0,705,707,1,0,0,0,706,708,5,22,0,0,707,706,1,0,0,0,707,708,
1,0,0,0,708,709,1,0,0,0,709,710,3,106,53,0,710,712,5,5,0,0,711,713,3,88,
44,0,712,711,1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,715,5,6,0,0,715,
716,5,7,0,0,716,717,3,94,47,0,717,718,5,8,0,0,718,739,1,0,0,0,719,720,3,
172,86,0,720,721,5,5,0,0,721,722,5,6,0,0,722,723,5,7,0,0,723,724,3,94,47,
0,724,725,5,8,0,0,725,739,1,0,0,0,726,727,3,174,87,0,727,728,5,5,0,0,728,
729,3,90,45,0,729,730,5,6,0,0,730,731,5,7,0,0,731,732,3,94,47,0,732,733,
5,8,0,0,733,739,1,0,0,0,734,736,5,14,0,0,735,734,1,0,0,0,735,736,1,0,0,0,
736,737,1,0,0,0,737,739,3,114,57,0,738,693,1,0,0,0,738,697,1,0,0,0,738,704,
1,0,0,0,738,719,1,0,0,0,738,726,1,0,0,0,738,735,1,0,0,0,739,105,1,0,0,0,
740,748,3,176,88,0,741,748,5,117,0,0,742,748,3,168,84,0,743,744,5,3,0,0,
744,745,3,114,57,0,745,746,5,4,0,0,746,748,1,0,0,0,747,740,1,0,0,0,747,741,
1,0,0,0,747,742,1,0,0,0,747,743,1,0,0,0,748,107,1,0,0,0,749,761,5,5,0,0,
750,755,3,110,55,0,751,752,5,10,0,0,752,754,3,110,55,0,753,751,1,0,0,0,754,
757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,759,1,0,0,0,757,755,1,0,
0,0,758,760,5,10,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,762,1,0,0,0,761,
750,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,764,5,6,0,0,764,109,1,0,
0,0,765,767,5,14,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,770,1,0,0,0,768,
771,3,114,57,0,769,771,3,178,89,0,770,768,1,0,0,0,770,769,1,0,0,0,771,111,
1,0,0,0,772,774,5,14,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,
775,783,3,114,57,0,776,778,5,10,0,0,777,779,5,14,0,0,778,777,1,0,0,0,778,
779,1,0,0,0,779,780,1,0,0,0,780,782,3,114,57,0,781,776,1,0,0,0,782,785,1,
0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,113,1,0,0,0,785,783,1,0,0,0,786,
787,6,57,-1,0,787,840,3,154,77,0,788,790,5,97,0,0,789,791,3,178,89,0,790,
789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,840,3,82,41,0,793,794,5,
74,0,0,794,795,3,114,57,0,795,796,3,108,54,0,796,840,1,0,0,0,797,798,5,74,
0,0,798,840,3,114,57,43,799,800,5,74,0,0,800,801,5,15,0,0,801,840,3,178,
89,0,802,803,5,91,0,0,803,840,3,114,57,38,804,805,5,79,0,0,805,840,3,114,
57,37,806,807,5,71,0,0,807,840,3,114,57,36,808,809,5,16,0,0,809,840,3,114,
57,35,810,811,5,17,0,0,811,840,3,114,57,34,812,813,5,18,0,0,813,840,3,114,
57,33,814,815,5,19,0,0,815,840,3,114,57,32,816,817,5,20,0,0,817,840,3,114,
57,31,818,819,5,21,0,0,819,840,3,114,57,30,820,821,5,105,0,0,821,840,3,114,
57,29,822,823,5,103,0,0,823,824,5,5,0,0,824,825,3,114,57,0,825,826,5,6,0,
0,826,840,1,0,0,0,827,840,3,52,26,0,828,840,5,86,0,0,829,840,3,178,89,0,
830,840,5,100,0,0,831,840,3,162,81,0,832,840,3,98,49,0,833,840,3,148,74,
0,834,840,3,116,58,0,835,836,5,5,0,0,836,837,3,112,56,0,837,838,5,6,0,0,
838,840,1,0,0,0,839,786,1,0,0,0,839,788,1,0,0,0,839,793,1,0,0,0,839,797,
1,0,0,0,839,799,1,0,0,0,839,802,1,0,0,0,839,804,1,0,0,0,839,806,1,0,0,0,
839,808,1,0,0,0,839,810,1,0,0,0,839,812,1,0,0,0,839,814,1,0,0,0,839,816,
1,0,0,0,839,818,1,0,0,0,839,820,1,0,0,0,839,822,1,0,0,0,839,827,1,0,0,0,
839,828,1,0,0,0,839,829,1,0,0,0,839,830,1,0,0,0,839,831,1,0,0,0,839,832,
1,0,0,0,839,833,1,0,0,0,839,834,1,0,0,0,839,835,1,0,0,0,840,922,1,0,0,0,
841,842,10,28,0,0,842,843,5,25,0,0,843,921,3,114,57,28,844,845,10,27,0,0,
845,846,7,1,0,0,846,921,3,114,57,28,847,848,10,26,0,0,848,849,7,2,0,0,849,
921,3,114,57,27,850,851,10,25,0,0,851,852,5,26,0,0,852,921,3,114,57,26,853,
854,10,24,0,0,854,855,7,3,0,0,855,921,3,114,57,25,856,857,10,23,0,0,857,
858,7,4,0,0,858,921,3,114,57,24,859,860,10,22,0,0,860,861,5,70,0,0,861,921,
3,114,57,23,862,863,10,21,0,0,863,864,5,92,0,0,864,921,3,114,57,22,865,866,
10,20,0,0,866,867,7,5,0,0,867,921,3,114,57,21,868,869,10,19,0,0,869,870,
5,39,0,0,870,921,3,114,57,20,871,872,10,18,0,0,872,873,5,40,0,0,873,921,
3,114,57,19,874,875,10,17,0,0,875,876,5,41,0,0,876,921,3,114,57,18,877,878,
10,16,0,0,878,879,5,42,0,0,879,921,3,114,57,17,880,881,10,15,0,0,881,882,
5,43,0,0,882,921,3,114,57,16,883,884,10,14,0,0,884,885,5,12,0,0,885,886,
3,114,57,0,886,887,5,13,0,0,887,888,3,114,57,15,888,921,1,0,0,0,889,890,
10,13,0,0,890,891,5,11,0,0,891,921,3,114,57,13,892,893,10,12,0,0,893,894,
3,160,80,0,894,895,3,114,57,12,895,921,1,0,0,0,896,897,10,46,0,0,897,898,
5,3,0,0,898,899,3,112,56,0,899,900,5,4,0,0,900,921,1,0,0,0,901,903,10,45,
0,0,902,904,5,12,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,
907,5,15,0,0,906,908,5,27,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,
0,0,0,909,921,3,176,88,0,910,911,10,42,0,0,911,921,3,108,54,0,912,913,10,
40,0,0,913,914,4,57,29,0,914,921,5,16,0,0,915,916,10,39,0,0,916,917,4,57,
31,0,917,921,5,17,0,0,918,919,10,10,0,0,919,921,3,164,82,0,920,841,1,0,0,
0,920,844,1,0,0,0,920,847,1,0,0,0,920,850,1,0,0,0,920,853,1,0,0,0,920,856,
1,0,0,0,920,859,1,0,0,0,920,862,1,0,0,0,920,865,1,0,0,0,920,868,1,0,0,0,
920,871,1,0,0,0,920,874,1,0,0,0,920,877,1,0,0,0,920,880,1,0,0,0,920,883,
1,0,0,0,920,889,1,0,0,0,920,892,1,0,0,0,920,896,1,0,0,0,920,901,1,0,0,0,
920,910,1,0,0,0,920,912,1,0,0,0,920,915,1,0,0,0,920,918,1,0,0,0,921,924,
1,0,0,0,922,920,1,0,0,0,922,923,1,0,0,0,923,115,1,0,0,0,924,922,1,0,0,0,
925,927,3,120,60,0,926,925,1,0,0,0,927,928,1,0,0,0,928,926,1,0,0,0,928,929,
1,0,0,0,929,117,1,0,0,0,930,931,7,6,0,0,931,119,1,0,0,0,932,938,3,122,61,
0,933,934,3,124,62,0,934,935,3,128,64,0,935,936,3,126,63,0,936,938,1,0,0,
0,937,932,1,0,0,0,937,933,1,0,0,0,938,121,1,0,0,0,939,940,3,118,59,0,940,
942,3,130,65,0,941,943,3,136,68,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,
1,0,0,0,944,945,5,134,0,0,945,123,1,0,0,0,946,947,3,118,59,0,947,949,3,132,
66,0,948,950,3,136,68,0,949,948,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,
951,952,5,133,0,0,952,125,1,0,0,0,953,954,5,145,0,0,954,955,3,134,67,0,955,
956,5,147,0,0,956,127,1,0,0,0,957,959,5,143,0,0,958,957,1,0,0,0,958,959,
1,0,0,0,959,969,1,0,0,0,960,963,3,120,60,0,961,963,3,152,76,0,962,960,1,
0,0,0,962,961,1,0,0,0,963,965,1,0,0,0,964,966,5,143,0,0,965,964,1,0,0,0,
965,966,1,0,0,0,966,968,1,0,0,0,967,962,1,0,0,0,968,971,1,0,0,0,969,967,
1,0,0,0,969,970,1,0,0,0,970,129,1,0,0,0,971,969,1,0,0,0,972,973,5,137,0,
0,973,131,1,0,0,0,974,975,5,137,0,0,975,976,6,66,-1,0,976,133,1,0,0,0,977,
978,5,148,0,0,978,979,4,67,33,1,979,135,1,0,0,0,980,982,3,138,69,0,981,983,
3,136,68,0,982,981,1,0,0,0,982,983,1,0,0,0,983,989,1,0,0,0,984,986,3,140,
70,0,985,987,3,136,68,0,986,985,1,0,0,0,986,987,1,0,0,0,987,989,1,0,0,0,
988,980,1,0,0,0,988,984,1,0,0,0,989,137,1,0,0,0,990,991,5,136,0,0,991,992,
5,14,0,0,992,993,3,114,57,0,993,994,5,8,0,0,994,139,1,0,0,0,995,996,3,142,
71,0,996,997,5,135,0,0,997,998,3,144,72,0,998,1001,1,0,0,0,999,1001,3,142,
71,0,1000,995,1,0,0,0,1000,999,1,0,0,0,1001,141,1,0,0,0,1002,1003,5,137,
0,0,1003,143,1,0,0,0,1004,1008,5,142,0,0,1005,1008,3,120,60,0,1006,1008,
3,152,76,0,1007,1004,1,0,0,0,1007,1005,1,0,0,0,1007,1006,1,0,0,0,1008,145,
1,0,0,0,1009,1013,3,178,89,0,1010,1013,3,98,49,0,1011,1013,3,148,74,0,1012,
1009,1,0,0,0,1012,1010,1,0,0,0,1012,1011,1,0,0,0,1013,147,1,0,0,0,1014,1026,
5,7,0,0,1015,1020,3,104,52,0,1016,1017,5,10,0,0,1017,1019,3,104,52,0,1018,
1016,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,
1024,1,0,0,0,1022,1020,1,0,0,0,1023,1025,5,10,0,0,1024,1023,1,0,0,0,1024,
1025,1,0,0,0,1025,1027,1,0,0,0,1026,1015,1,0,0,0,1026,1027,1,0,0,0,1027,
1028,1,0,0,0,1028,1029,5,8,0,0,1029,149,1,0,0,0,1030,1031,7,7,0,0,1031,151,
1,0,0,0,1032,1033,3,150,75,0,1033,1034,3,112,56,0,1034,1035,5,8,0,0,1035,
153,1,0,0,0,1036,1061,3,78,39,0,1037,1039,5,104,0,0,1038,1037,1,0,0,0,1038,
1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,5,85,0,0,1041,1043,5,22,0,0,1042,
1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1046,5,5,0,0,1045,
1047,3,88,44,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,
1049,5,6,0,0,1049,1050,5,7,0,0,1050,1051,3,94,47,0,1051,1052,5,8,0,0,1052,
1061,1,0,0,0,1053,1055,5,104,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,
1056,1,0,0,0,1056,1057,3,156,78,0,1057,1058,5,56,0,0,1058,1059,3,158,79,
0,1059,1061,1,0,0,0,1060,1036,1,0,0,0,1060,1038,1,0,0,0,1060,1054,1,0,0,
0,1061,155,1,0,0,0,1062,1069,3,178,89,0,1063,1065,5,5,0,0,1064,1066,3,88,
44,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1069,5,6,
0,0,1068,1062,1,0,0,0,1068,1063,1,0,0,0,1069,157,1,0,0,0,1070,1076,3,114,
57,0,1071,1072,5,7,0,0,1072,1073,3,94,47,0,1073,1074,5,8,0,0,1074,1076,1,
0,0,0,1075,1070,1,0,0,0,1075,1071,1,0,0,0,1076,159,1,0,0,0,1077,1078,7,8,
0,0,1078,161,1,0,0,0,1079,1087,5,57,0,0,1080,1087,5,58,0,0,1081,1087,5,117,
0,0,1082,1087,3,164,82,0,1083,1087,5,125,0,0,1084,1087,3,168,84,0,1085,1087,
3,170,85,0,1086,1079,1,0,0,0,1086,1080,1,0,0,0,1086,1081,1,0,0,0,1086,1082,
1,0,0,0,1086,1083,1,0,0,0,1086,1084,1,0,0,0,1086,1085,1,0,0,0,1087,163,1,
0,0,0,1088,1092,5,119,0,0,1089,1091,3,166,83,0,1090,1089,1,0,0,0,1091,1094,
1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1095,1,0,0,0,1094,1092,
1,0,0,0,1095,1096,5,119,0,0,1096,165,1,0,0,0,1097,1103,5,131,0,0,1098,1099,
5,130,0,0,1099,1100,3,114,57,0,1100,1101,5,8,0,0,1101,1103,1,0,0,0,1102,
1097,1,0,0,0,1102,1098,1,0,0,0,1103,167,1,0,0,0,1104,1105,7,9,0,0,1105,169,
1,0,0,0,1106,1107,7,10,0,0,1107,171,1,0,0,0,1108,1109,3,178,89,0,1109,1110,
4,86,34,0,1110,1111,3,106,53,0,1111,173,1,0,0,0,1112,1113,3,178,89,0,1113,
1114,4,87,35,0,1114,1115,3,106,53,0,1115,175,1,0,0,0,1116,1119,3,178,89,
0,1117,1119,3,180,90,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,177,1,0,
0,0,1120,1121,7,11,0,0,1121,179,1,0,0,0,1122,1126,3,182,91,0,1123,1126,5,
57,0,0,1124,1126,5,58,0,0,1125,1122,1,0,0,0,1125,1123,1,0,0,0,1125,1124,
1,0,0,0,1126,181,1,0,0,0,1127,1174,5,68,0,0,1128,1174,5,69,0,0,1129,1174,
5,70,0,0,1130,1174,5,71,0,0,1131,1174,5,72,0,0,1132,1174,5,73,0,0,1133,1174,
5,74,0,0,1134,1174,5,75,0,0,1135,1174,5,76,0,0,1136,1174,5,77,0,0,1137,1174,
5,78,0,0,1138,1174,5,79,0,0,1139,1174,5,80,0,0,1140,1174,5,81,0,0,1141,1174,
5,82,0,0,1142,1174,5,83,0,0,1143,1174,5,84,0,0,1144,1174,5,85,0,0,1145,1174,
5,86,0,0,1146,1174,5,87,0,0,1147,1174,5,88,0,0,1148,1174,5,89,0,0,1149,1174,
5,90,0,0,1150,1174,5,91,0,0,1151,1174,5,92,0,0,1152,1174,5,93,0,0,1153,1174,
5,97,0,0,1154,1174,5,98,0,0,1155,1174,5,99,0,0,1156,1174,5,100,0,0,1157,
1174,5,101,0,0,1158,1174,5,102,0,0,1159,1174,5,103,0,0,1160,1174,5,106,0,
0,1161,1174,3,184,92,0,1162,1174,5,109,0,0,1163,1174,5,110,0,0,1164,1174,
5,111,0,0,1165,1174,5,112,0,0,1166,1174,5,113,0,0,1167,1174,5,114,0,0,1168,
1174,5,115,0,0,1169,1174,5,104,0,0,1170,1174,5,105,0,0,1171,1174,5,95,0,
0,1172,1174,5,94,0,0,1173,1127,1,0,0,0,1173,1128,1,0,0,0,1173,1129,1,0,0,
0,1173,1130,1,0,0,0,1173,1131,1,0,0,0,1173,1132,1,0,0,0,1173,1133,1,0,0,
0,1173,1134,1,0,0,0,1173,1135,1,0,0,0,1173,1136,1,0,0,0,1173,1137,1,0,0,
0,1173,1138,1,0,0,0,1173,1139,1,0,0,0,1173,1140,1,0,0,0,1173,1141,1,0,0,
0,1173,1142,1,0,0,0,1173,1143,1,0,0,0,1173,1144,1,0,0,0,1173,1145,1,0,0,
0,1173,1146,1,0,0,0,1173,1147,1,0,0,0,1173,1148,1,0,0,0,1173,1149,1,0,0,
0,1173,1150,1,0,0,0,1173,1151,1,0,0,0,1173,1152,1,0,0,0,1173,1153,1,0,0,
0,1173,1154,1,0,0,0,1173,1155,1,0,0,0,1173,1156,1,0,0,0,1173,1157,1,0,0,
0,1173,1158,1,0,0,0,1173,1159,1,0,0,0,1173,1160,1,0,0,0,1173,1161,1,0,0,
0,1173,1162,1,0,0,0,1173,1163,1,0,0,0,1173,1164,1,0,0,0,1173,1165,1,0,0,
0,1173,1166,1,0,0,0,1173,1167,1,0,0,0,1173,1168,1,0,0,0,1173,1169,1,0,0,
0,1173,1170,1,0,0,0,1173,1171,1,0,0,0,1173,1172,1,0,0,0,1174,183,1,0,0,0,
1175,1176,7,12,0,0,1176,185,1,0,0,0,1177,1182,5,9,0,0,1178,1182,5,0,0,1,
1179,1182,4,93,36,0,1180,1182,4,93,37,0,1181,1177,1,0,0,0,1181,1178,1,0,
0,0,1181,1179,1,0,0,0,1181,1180,1,0,0,0,1182,187,1,0,0,0,128,189,192,218,
222,229,235,239,246,254,259,261,270,274,282,287,296,304,308,313,324,330,
345,365,369,373,381,390,395,403,408,413,420,427,436,441,459,463,465,472,
478,483,498,501,506,509,520,524,529,542,548,557,559,568,572,578,581,584,
589,597,600,610,613,618,625,632,637,640,645,651,656,665,669,674,679,685,
689,704,707,712,735,738,747,755,759,761,766,770,773,778,783,790,839,903,
907,920,922,928,937,942,949,958,962,965,969,982,986,988,1000,1007,1012,1020,
1024,1026,1038,1042,1046,1054,1060,1065,1068,1075,1086,1092,1102,1118,1125,
1173,1181];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class JavaScriptParser extends JavaScriptParserBase {

    static grammarFileName = "JavaScriptParser.g4";
    static literalNames = [ null, null, null, "'['", "']'", "'('", "')'", 
                            null, null, "';'", "','", null, "'?'", "':'", 
                            "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", 
                            "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", 
                            "'#'", "'>>'", "'<<'", "'>>>'", null, null, 
                            "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", 
                            "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", 
                            "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", 
                            "'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'", 
                            "'null'", null, null, null, null, null, null, 
                            null, null, null, null, "'break'", "'do'", "'instanceof'", 
                            "'typeof'", "'case'", "'else'", "'new'", "'var'", 
                            "'catch'", "'finally'", "'return'", "'void'", 
                            "'continue'", "'for'", "'switch'", "'while'", 
                            "'debugger'", "'function'", "'this'", "'with'", 
                            "'default'", "'if'", "'throw'", "'delete'", 
                            "'in'", "'try'", "'as'", "'from'", "'yield*'", 
                            "'class'", "'enum'", "'extends'", "'super'", 
                            "'const'", "'export'", "'import'", "'async'", 
                            "'await'", "'implements'", null, null, "'private'", 
                            "'public'", "'interface'", "'package'", "'protected'", 
                            "'static'", "'yield'", null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'${'", null, null, null, "'/>'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'</'" ];
    static symbolicNames = [ null, "HashBangLine", "JsxElementBegin", "OpenBracket", 
                             "CloseBracket", "OpenParen", "CloseParen", 
                             "OpenBrace", "CloseBrace", "SemiColon", "Comma", 
                             "Assign", "QuestionMark", "Colon", "Ellipsis", 
                             "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", 
                             "BitNot", "Not", "Multiply", "Divide", "Modulus", 
                             "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                             "LeftShiftArithmetic", "RightShiftLogical", 
                             "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                             "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                             "DivideAssign", "ModulusAssign", "PlusAssign", 
                             "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", 
                             "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                             "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                             "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                             "Break", "Do", "Instanceof", "Typeof", "Case", 
                             "Else", "New", "Var", "Catch", "Finally", "Return", 
                             "Void", "Continue", "For", "Switch", "While", 
                             "Debugger", "Function_", "This", "With", "Default", 
                             "If", "Throw", "Delete", "In", "Try", "As", 
                             "From", "YieldStar", "Class", "Enum", "Extends", 
                             "Super", "Const", "Export", "Import", "Async", 
                             "Await", "Implements", "StrictLet", "NonStrictLet", 
                             "Private", "Public", "Interface", "Package", 
                             "Protected", "Static", "Yield", "Identifier", 
                             "StringLiteral", "LinkLiteral", "BackTick", 
                             "WhiteSpaces", "LineTerminator", "JsxComment", 
                             "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
                             "HtmlComment", "CDataComment", "UnexpectedCharacter", 
                             "CDATA", "TemplateStringStartExpression", "TemplateStringAtom", 
                             "JsxOpeningElementBegin", "JsxOpeningElementEnd", 
                             "JsxOpeningElementSlashEnd", "JsxAssign", "JsxOpeningElementOpenBrace", 
                             "JsxOpeningElementId", "JsxOpeningElementWhiteSpaces", 
                             "JsxOpeningElementLineTerminator", "JsxOpeningElementMultiLineComment", 
                             "JsxOpeningElementSingleLineComment", "JsxAttributeValue", 
                             "HtmlChardata", "JsxChildrenOpeningElementBegin", 
                             "JsxChildrenClosingElementSlashBegin", "JsxChildrenOpenBrace", 
                             "JsxClosingElementEnd", "JsxClosingElementId", 
                             "JsxClosingElementLineTerminator", "JsxClosingElementWhiteSpaces" ];
    static ruleNames = [ "program", "sourceElement", "statement", "block", 
                         "statementList", "importStatement", "importFromBlock", 
                         "moduleItems", "importDefault", "importNamespace", 
                         "importFrom", "aliasName", "exportStatement", "exportFromBlock", 
                         "declaration", "variableStatement", "variableDeclarationList", 
                         "variableDeclaration", "emptyStatement_", "expressionStatement", 
                         "ifStatement", "iterationStatement", "varModifier", 
                         "continueStatement", "breakStatement", "returnStatement", 
                         "yieldStatement", "withStatement", "switchStatement", 
                         "caseBlock", "caseClauses", "caseClause", "defaultClause", 
                         "labelledStatement", "throwStatement", "tryStatement", 
                         "catchProduction", "finallyProduction", "debuggerStatement", 
                         "functionDeclaration", "classDeclaration", "classTail", 
                         "classElement", "methodDefinition", "formalParameterList", 
                         "formalParameterArg", "lastFormalParameterArg", 
                         "functionBody", "sourceElements", "arrayLiteral", 
                         "elementList", "arrayElement", "propertyAssignment", 
                         "propertyName", "arguments", "argument", "expressionSequence", 
                         "singleExpression", "jsxElements", "jsxElementBegin", 
                         "jsxElement", "jsxSelfClosingElement", "jsxOpeningElement", 
                         "jsxClosingElement", "jsxChildren", "jsxSelfClosingElementName", 
                         "jsxOpeningElementName", "jsxClosingElementName", 
                         "jsxAttributes", "jsxSpreadAttribute", "jsxAttribute", 
                         "jsxAttributeName", "jsxAttributeValue", "assignable", 
                         "objectLiteral", "openBrace", "objectExpressionSequence", 
                         "anoymousFunction", "arrowFunctionParameters", 
                         "arrowFunctionBody", "assignmentOperator", "literal", 
                         "templateStringLiteral", "templateStringAtom", 
                         "numericLiteral", "bigintLiteral", "getter", "setter", 
                         "identifierName", "identifier", "reservedWord", 
                         "keyword", "let_", "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JavaScriptParser.ruleNames;
        this.literalNames = JavaScriptParser.literalNames;
        this.symbolicNames = JavaScriptParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 19:
    	    		return this.expressionStatement_sempred(localctx, predIndex);
    	case 21:
    	    		return this.iterationStatement_sempred(localctx, predIndex);
    	case 23:
    	    		return this.continueStatement_sempred(localctx, predIndex);
    	case 24:
    	    		return this.breakStatement_sempred(localctx, predIndex);
    	case 25:
    	    		return this.returnStatement_sempred(localctx, predIndex);
    	case 26:
    	    		return this.yieldStatement_sempred(localctx, predIndex);
    	case 34:
    	    		return this.throwStatement_sempred(localctx, predIndex);
    	case 42:
    	    		return this.classElement_sempred(localctx, predIndex);
    	case 57:
    	    		return this.singleExpression_sempred(localctx, predIndex);
    	case 67:
    	    		return this.jsxClosingElementName_sempred(localctx, predIndex);
    	case 86:
    	    		return this.getter_sempred(localctx, predIndex);
    	case 87:
    	    		return this.setter_sempred(localctx, predIndex);
    	case 93:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expressionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.notOpenBraceAndNotFunction();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    iterationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.p("of");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    continueStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    breakStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    returnStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    yieldStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    throwStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    classElement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.n("static");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    singleExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 28);
    		case 9:
    			return this.precpred(this._ctx, 27);
    		case 10:
    			return this.precpred(this._ctx, 26);
    		case 11:
    			return this.precpred(this._ctx, 25);
    		case 12:
    			return this.precpred(this._ctx, 24);
    		case 13:
    			return this.precpred(this._ctx, 23);
    		case 14:
    			return this.precpred(this._ctx, 22);
    		case 15:
    			return this.precpred(this._ctx, 21);
    		case 16:
    			return this.precpred(this._ctx, 20);
    		case 17:
    			return this.precpred(this._ctx, 19);
    		case 18:
    			return this.precpred(this._ctx, 18);
    		case 19:
    			return this.precpred(this._ctx, 17);
    		case 20:
    			return this.precpred(this._ctx, 16);
    		case 21:
    			return this.precpred(this._ctx, 15);
    		case 22:
    			return this.precpred(this._ctx, 14);
    		case 23:
    			return this.precpred(this._ctx, 13);
    		case 24:
    			return this.precpred(this._ctx, 12);
    		case 25:
    			return this.precpred(this._ctx, 46);
    		case 26:
    			return this.precpred(this._ctx, 45);
    		case 27:
    			return this.precpred(this._ctx, 42);
    		case 28:
    			return this.precpred(this._ctx, 40);
    		case 29:
    			return this.notLineTerminator();
    		case 30:
    			return this.precpred(this._ctx, 39);
    		case 31:
    			return this.notLineTerminator();
    		case 32:
    			return this.precpred(this._ctx, 10);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    jsxClosingElementName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 33:
    			return this.popHtmlTagName((localctx._JsxClosingElementId == null ? null : localctx._JsxClosingElementId.text));
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    getter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 34:
    			return this.p("get");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 35:
    			return this.p("set");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 36:
    			return this.lineTerminatorAhead();
    		case 37:
    			return this.closeBrace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 188;
	            this.match(JavaScriptParser.HashBangLine);

	        }
	        this.state = 192;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 191;
	            this.sourceElements();

	        }
	        this.state = 194;
	        this.match(JavaScriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElement() {
	    let localctx = new SourceElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 196;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
	    try {
	        this.state = 218;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 198;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 199;
	            this.variableStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 200;
	            this.importStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 201;
	            this.exportStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 202;
	            this.emptyStatement_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 203;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 204;
	            this.expressionStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 205;
	            this.ifStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 206;
	            this.iterationStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 207;
	            this.continueStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 208;
	            this.breakStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 209;
	            this.returnStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 210;
	            this.yieldStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 211;
	            this.withStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 212;
	            this.labelledStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 213;
	            this.switchStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 214;
	            this.throwStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 215;
	            this.tryStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 216;
	            this.debuggerStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 217;
	            this.functionDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 220;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 221;
	            this.statementList();

	        }
	        this.state = 224;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 227; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 226;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 229; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 231;
	        this.match(JavaScriptParser.Import);
	        this.state = 232;
	        this.importFromBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFromBlock() {
	    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);
	    try {
	        this.state = 246;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 22:
	        case 57:
	        case 58:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 235;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 234;
	                this.importDefault();

	            }
	            this.state = 239;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 22:
	            case 57:
	            case 58:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	                this.state = 237;
	                this.importNamespace();
	                break;
	            case 7:
	                this.state = 238;
	                this.moduleItems();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 241;
	            this.importFrom();
	            this.state = 242;
	            this.eos();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 244;
	            this.match(JavaScriptParser.StringLiteral);
	            this.state = 245;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleItems() {
	    let localctx = new ModuleItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JavaScriptParser.RULE_moduleItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 248;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 254;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 249;
	                this.aliasName();
	                this.state = 250;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 256;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	        this.state = 261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294965251) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 268435327) !== 0)) {
	            this.state = 257;
	            this.aliasName();
	            this.state = 259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10) {
	                this.state = 258;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 263;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDefault() {
	    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JavaScriptParser.RULE_importDefault);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 265;
	        this.aliasName();
	        this.state = 266;
	        this.match(JavaScriptParser.Comma);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importNamespace() {
	    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JavaScriptParser.RULE_importNamespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 270;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	            this.state = 268;
	            this.match(JavaScriptParser.Multiply);
	            break;
	        case 57:
	        case 58:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	            this.state = 269;
	            this.identifierName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 272;
	            this.match(JavaScriptParser.As);
	            this.state = 273;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFrom() {
	    let localctx = new ImportFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JavaScriptParser.RULE_importFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 276;
	        this.match(JavaScriptParser.From);
	        this.state = 277;
	        this.match(JavaScriptParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasName() {
	    let localctx = new AliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JavaScriptParser.RULE_aliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 279;
	        this.identifierName();
	        this.state = 282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 280;
	            this.match(JavaScriptParser.As);
	            this.state = 281;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JavaScriptParser.RULE_exportStatement);
	    try {
	        this.state = 296;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExportDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 284;
	            this.match(JavaScriptParser.Export);
	            this.state = 287;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 285;
	                this.exportFromBlock();
	                break;

	            case 2:
	                this.state = 286;
	                this.declaration();
	                break;

	            }
	            this.state = 289;
	            this.eos();
	            break;

	        case 2:
	            localctx = new ExportDefaultDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 291;
	            this.match(JavaScriptParser.Export);
	            this.state = 292;
	            this.match(JavaScriptParser.Default);
	            this.state = 293;
	            this.singleExpression(0);
	            this.state = 294;
	            this.eos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportFromBlock() {
	    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JavaScriptParser.RULE_exportFromBlock);
	    try {
	        this.state = 308;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 57:
	        case 58:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 298;
	            this.importNamespace();
	            this.state = 299;
	            this.importFrom();
	            this.state = 300;
	            this.eos();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 302;
	            this.moduleItems();
	            this.state = 304;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 303;
	                this.importFrom();

	            }
	            this.state = 306;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JavaScriptParser.RULE_declaration);
	    try {
	        this.state = 313;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 75:
	        case 101:
	        case 107:
	        case 108:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 310;
	            this.variableStatement();
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 311;
	            this.classDeclaration();
	            break;
	        case 85:
	        case 104:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 312;
	            this.functionDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableStatement() {
	    let localctx = new VariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JavaScriptParser.RULE_variableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        this.variableDeclarationList();
	        this.state = 316;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JavaScriptParser.RULE_variableDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 318;
	        this.varModifier();
	        this.state = 319;
	        this.variableDeclaration();
	        this.state = 324;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 320;
	                this.match(JavaScriptParser.Comma);
	                this.state = 321;
	                this.variableDeclaration(); 
	            }
	            this.state = 326;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JavaScriptParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 327;
	        this.assignable();
	        this.state = 330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 328;
	            this.match(JavaScriptParser.Assign);
	            this.state = 329;
	            this.singleExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JavaScriptParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 332;
	        this.match(JavaScriptParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JavaScriptParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 334;
	        if (!( this.notOpenBraceAndNotFunction())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
	        }
	        this.state = 335;
	        this.expressionSequence();
	        this.state = 336;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JavaScriptParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this.match(JavaScriptParser.If);
	        this.state = 339;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 340;
	        this.expressionSequence();
	        this.state = 341;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 342;
	        this.statement();
	        this.state = 345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 343;
	            this.match(JavaScriptParser.Else);
	            this.state = 344;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JavaScriptParser.RULE_iterationStatement);
	    var _la = 0;
	    try {
	        this.state = 403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 347;
	            this.match(JavaScriptParser.Do);
	            this.state = 348;
	            this.statement();
	            this.state = 349;
	            this.match(JavaScriptParser.While);
	            this.state = 350;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 351;
	            this.expressionSequence();
	            this.state = 352;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 353;
	            this.eos();
	            break;

	        case 2:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 355;
	            this.match(JavaScriptParser.While);
	            this.state = 356;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 357;
	            this.expressionSequence();
	            this.state = 358;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 359;
	            this.statement();
	            break;

	        case 3:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 361;
	            this.match(JavaScriptParser.For);
	            this.state = 362;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 365;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 363;
	                this.expressionSequence();

	            } else if(la_===2) {
	                this.state = 364;
	                this.variableDeclarationList();

	            }
	            this.state = 367;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4145324) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 809650175) !== 0) || ((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 386036321) !== 0) || ((((_la - 125)) & ~0x1f) === 0 && ((1 << (_la - 125)) & 524417) !== 0)) {
	                this.state = 368;
	                this.expressionSequence();
	            }

	            this.state = 371;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 373;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4145324) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 809650175) !== 0) || ((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 386036321) !== 0) || ((((_la - 125)) & ~0x1f) === 0 && ((1 << (_la - 125)) & 524417) !== 0)) {
	                this.state = 372;
	                this.expressionSequence();
	            }

	            this.state = 375;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 376;
	            this.statement();
	            break;

	        case 4:
	            localctx = new ForInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 377;
	            this.match(JavaScriptParser.For);
	            this.state = 378;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 381;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 379;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 380;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 383;
	            this.match(JavaScriptParser.In);
	            this.state = 384;
	            this.expressionSequence();
	            this.state = 385;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 386;
	            this.statement();
	            break;

	        case 5:
	            localctx = new ForOfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 388;
	            this.match(JavaScriptParser.For);
	            this.state = 390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===105) {
	                this.state = 389;
	                this.match(JavaScriptParser.Await);
	            }

	            this.state = 392;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 395;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 393;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 394;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 397;
	            this.identifier();
	            this.state = 398;
	            if (!( this.p("of"))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
	            }
	            this.state = 399;
	            this.expressionSequence();
	            this.state = 400;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 401;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JavaScriptParser.RULE_varModifier);
	    try {
	        this.state = 408;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 75:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 405;
	            this.match(JavaScriptParser.Var);
	            break;
	        case 107:
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.let_();
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 407;
	            this.match(JavaScriptParser.Const);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JavaScriptParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 410;
	        this.match(JavaScriptParser.Continue);
	        this.state = 413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 411;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 412;
	            this.identifier();

	        }
	        this.state = 415;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JavaScriptParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this.match(JavaScriptParser.Break);
	        this.state = 420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 418;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 419;
	            this.identifier();

	        }
	        this.state = 422;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JavaScriptParser.RULE_returnStatement);
	    try {
	        this.state = 436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 424;
	            this.match(JavaScriptParser.Return);
	            this.state = 427;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            if(la_===1) {
	                this.state = 425;
	                if (!( this.notLineTerminator())) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                }
	                this.state = 426;
	                this.expressionSequence();

	            }
	            this.state = 429;
	            this.eos();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 430;
	            this.match(JavaScriptParser.Return);
	            this.state = 431;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 432;
	            this.jsxElements();
	            this.state = 433;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 434;
	            this.eos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JavaScriptParser.RULE_yieldStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 438;
	        _la = this._input.LA(1);
	        if(!(_la===96 || _la===115)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        if(la_===1) {
	            this.state = 439;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 440;
	            this.expressionSequence();

	        }
	        this.state = 443;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JavaScriptParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.match(JavaScriptParser.With);
	        this.state = 446;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 447;
	        this.expressionSequence();
	        this.state = 448;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 449;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JavaScriptParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this.match(JavaScriptParser.Switch);
	        this.state = 452;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 453;
	        this.expressionSequence();
	        this.state = 454;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 455;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JavaScriptParser.RULE_caseBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===72) {
	            this.state = 458;
	            this.caseClauses();
	        }

	        this.state = 465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 461;
	            this.defaultClause();
	            this.state = 463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 462;
	                this.caseClauses();
	            }

	        }

	        this.state = 467;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JavaScriptParser.RULE_caseClauses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 470; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 469;
	            this.caseClause();
	            this.state = 472; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===72);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JavaScriptParser.RULE_caseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        this.match(JavaScriptParser.Case);
	        this.state = 475;
	        this.expressionSequence();
	        this.state = 476;
	        this.match(JavaScriptParser.Colon);
	        this.state = 478;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 477;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JavaScriptParser.RULE_defaultClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this.match(JavaScriptParser.Default);
	        this.state = 481;
	        this.match(JavaScriptParser.Colon);
	        this.state = 483;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 482;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledStatement() {
	    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JavaScriptParser.RULE_labelledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.identifier();
	        this.state = 486;
	        this.match(JavaScriptParser.Colon);
	        this.state = 487;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JavaScriptParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this.match(JavaScriptParser.Throw);
	        this.state = 490;
	        if (!( this.notLineTerminator())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	        }
	        this.state = 491;
	        this.expressionSequence();
	        this.state = 492;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JavaScriptParser.RULE_tryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this.match(JavaScriptParser.Try);
	        this.state = 495;
	        this.block();
	        this.state = 501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	            this.state = 496;
	            this.catchProduction();
	            this.state = 498;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	            if(la_===1) {
	                this.state = 497;
	                this.finallyProduction();

	            }
	            break;
	        case 77:
	            this.state = 500;
	            this.finallyProduction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchProduction() {
	    let localctx = new CatchProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JavaScriptParser.RULE_catchProduction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(JavaScriptParser.Catch);
	        this.state = 509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 504;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===7 || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	                this.state = 505;
	                this.assignable();
	            }

	            this.state = 508;
	            this.match(JavaScriptParser.CloseParen);
	        }

	        this.state = 511;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyProduction() {
	    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JavaScriptParser.RULE_finallyProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 513;
	        this.match(JavaScriptParser.Finally);
	        this.state = 514;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	debuggerStatement() {
	    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JavaScriptParser.RULE_debuggerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.match(JavaScriptParser.Debugger);
	        this.state = 517;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JavaScriptParser.RULE_functionDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===104) {
	            this.state = 519;
	            this.match(JavaScriptParser.Async);
	        }

	        this.state = 522;
	        this.match(JavaScriptParser.Function_);
	        this.state = 524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22) {
	            this.state = 523;
	            this.match(JavaScriptParser.Multiply);
	        }

	        this.state = 526;
	        this.identifier();
	        this.state = 527;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 529;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16520) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	            this.state = 528;
	            this.formalParameterList();
	        }

	        this.state = 531;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 532;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 533;
	        this.functionBody();
	        this.state = 534;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JavaScriptParser.RULE_classDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 536;
	        this.match(JavaScriptParser.Class);
	        this.state = 537;
	        this.identifier();
	        this.state = 538;
	        this.classTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTail() {
	    let localctx = new ClassTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JavaScriptParser.RULE_classTail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 540;
	            this.match(JavaScriptParser.Extends);
	            this.state = 541;
	            this.singleExpression(0);
	        }

	        this.state = 544;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 548;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 545;
	                this.classElement(); 
	            }
	            this.state = 550;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	        this.state = 551;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classElement() {
	    let localctx = new ClassElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JavaScriptParser.RULE_classElement);
	    var _la = 0;
	    try {
	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 559;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 557;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 553;
	                        this.match(JavaScriptParser.Static);
	                        break;

	                    case 2:
	                        this.state = 554;
	                        if (!( this.n("static"))) {
	                            throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
	                        }
	                        this.state = 555;
	                        this.identifier();
	                        break;

	                    case 3:
	                        this.state = 556;
	                        this.match(JavaScriptParser.Async);
	                        break;

	                    } 
	                }
	                this.state = 561;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
	            }

	            this.state = 568;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 562;
	                this.methodDefinition();
	                break;

	            case 2:
	                this.state = 563;
	                this.assignable();
	                this.state = 564;
	                this.match(JavaScriptParser.Assign);
	                this.state = 565;
	                this.objectLiteral();
	                this.state = 566;
	                this.match(JavaScriptParser.SemiColon);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 570;
	            this.emptyStatement_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 571;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 574;
	            this.propertyName();
	            this.state = 575;
	            this.match(JavaScriptParser.Assign);
	            this.state = 576;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDefinition() {
	    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JavaScriptParser.RULE_methodDefinition);
	    var _la = 0;
	    try {
	        this.state = 625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 580;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 583;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 586;
	            this.propertyName();
	            this.state = 587;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16520) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	                this.state = 588;
	                this.formalParameterList();
	            }

	            this.state = 591;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 592;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 593;
	            this.functionBody();
	            this.state = 594;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 596;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 599;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 602;
	            this.getter();
	            this.state = 603;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 604;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 605;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 606;
	            this.functionBody();
	            this.state = 607;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 609;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 612;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 615;
	            this.setter();
	            this.state = 616;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16520) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	                this.state = 617;
	                this.formalParameterList();
	            }

	            this.state = 620;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 621;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 622;
	            this.functionBody();
	            this.state = 623;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JavaScriptParser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.state = 640;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 7:
	        case 104:
	        case 108:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 627;
	            this.formalParameterArg();
	            this.state = 632;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 628;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 629;
	                    this.formalParameterArg(); 
	                }
	                this.state = 634;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	            }

	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10) {
	                this.state = 635;
	                this.match(JavaScriptParser.Comma);
	                this.state = 636;
	                this.lastFormalParameterArg();
	            }

	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 639;
	            this.lastFormalParameterArg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterArg() {
	    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JavaScriptParser.RULE_formalParameterArg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.assignable();
	        this.state = 645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 643;
	            this.match(JavaScriptParser.Assign);
	            this.state = 644;
	            this.singleExpression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameterArg() {
	    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JavaScriptParser.RULE_lastFormalParameterArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(JavaScriptParser.Ellipsis);
	        this.state = 648;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JavaScriptParser.RULE_functionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        if(la_===1) {
	            this.state = 650;
	            this.sourceElements();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElements() {
	    let localctx = new SourceElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JavaScriptParser.RULE_sourceElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 653;
	        		this.sourceElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 656; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,69, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JavaScriptParser.RULE_arrayLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.match(JavaScriptParser.OpenBracket);
	        this.state = 659;
	        this.elementList();
	        this.state = 660;
	        this.match(JavaScriptParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JavaScriptParser.RULE_elementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 662;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 667;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
	        }

	        this.state = 669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4145324) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 809650175) !== 0) || ((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 386036321) !== 0) || ((((_la - 125)) & ~0x1f) === 0 && ((1 << (_la - 125)) & 524417) !== 0)) {
	            this.state = 668;
	            this.arrayElement();
	        }

	        this.state = 679;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 672; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 671;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 674; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===10);
	                this.state = 676;
	                this.arrayElement(); 
	            }
	            this.state = 681;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	        }

	        this.state = 685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 682;
	            this.match(JavaScriptParser.Comma);
	            this.state = 687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElement() {
	    let localctx = new ArrayElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JavaScriptParser.RULE_arrayElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 688;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 691;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JavaScriptParser.RULE_propertyAssignment);
	    var _la = 0;
	    try {
	        this.state = 738;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 693;
	            this.propertyName();
	            this.state = 694;
	            this.match(JavaScriptParser.Colon);
	            this.state = 695;
	            this.singleExpression(0);
	            break;

	        case 2:
	            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 697;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 698;
	            this.singleExpression(0);
	            this.state = 699;
	            this.match(JavaScriptParser.CloseBracket);
	            this.state = 700;
	            this.match(JavaScriptParser.Colon);
	            this.state = 701;
	            this.singleExpression(0);
	            break;

	        case 3:
	            localctx = new FunctionPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 704;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	            if(la_===1) {
	                this.state = 703;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 706;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 709;
	            this.propertyName();
	            this.state = 710;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16520) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	                this.state = 711;
	                this.formalParameterList();
	            }

	            this.state = 714;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 715;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 716;
	            this.functionBody();
	            this.state = 717;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 4:
	            localctx = new PropertyGetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 719;
	            this.getter();
	            this.state = 720;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 721;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 722;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 723;
	            this.functionBody();
	            this.state = 724;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 5:
	            localctx = new PropertySetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 726;
	            this.setter();
	            this.state = 727;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 728;
	            this.formalParameterArg();
	            this.state = 729;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 730;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 731;
	            this.functionBody();
	            this.state = 732;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 6:
	            localctx = new PropertyShorthandContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===14) {
	                this.state = 734;
	                this.match(JavaScriptParser.Ellipsis);
	            }

	            this.state = 737;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JavaScriptParser.RULE_propertyName);
	    try {
	        this.state = 747;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	        case 58:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 740;
	            this.identifierName();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 741;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 742;
	            this.numericLiteral();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 743;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 744;
	            this.singleExpression(0);
	            this.state = 745;
	            this.match(JavaScriptParser.CloseBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JavaScriptParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4145324) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 809650175) !== 0) || ((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 386036321) !== 0) || ((((_la - 125)) & ~0x1f) === 0 && ((1 << (_la - 125)) & 524417) !== 0)) {
	            this.state = 750;
	            this.argument();
	            this.state = 755;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 751;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 752;
	                    this.argument(); 
	                }
	                this.state = 757;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	            }

	            this.state = 759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10) {
	                this.state = 758;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 763;
	        this.match(JavaScriptParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JavaScriptParser.RULE_argument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 765;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 770;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 768;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.state = 769;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JavaScriptParser.RULE_expressionSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 772;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 775;
	        this.singleExpression(0);
	        this.state = 783;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 776;
	                this.match(JavaScriptParser.Comma);
	                this.state = 778;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===14) {
	                    this.state = 777;
	                    this.match(JavaScriptParser.Ellipsis);
	                }

	                this.state = 780;
	                this.singleExpression(0); 
	            }
	            this.state = 785;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	singleExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 114;
	    this.enterRecursionRule(localctx, 114, JavaScriptParser.RULE_singleExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 839;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 787;
	            this.anoymousFunction();
	            break;

	        case 2:
	            localctx = new ClassExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 788;
	            this.match(JavaScriptParser.Class);
	            this.state = 790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	                this.state = 789;
	                this.identifier();
	            }

	            this.state = 792;
	            this.classTail();
	            break;

	        case 3:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 793;
	            this.match(JavaScriptParser.New);
	            this.state = 794;
	            this.singleExpression(0);
	            this.state = 795;
	            this.arguments();
	            break;

	        case 4:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 797;
	            this.match(JavaScriptParser.New);
	            this.state = 798;
	            this.singleExpression(43);
	            break;

	        case 5:
	            localctx = new MetaExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 799;
	            this.match(JavaScriptParser.New);
	            this.state = 800;
	            this.match(JavaScriptParser.Dot);
	            this.state = 801;
	            this.identifier();
	            break;

	        case 6:
	            localctx = new DeleteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 802;
	            this.match(JavaScriptParser.Delete);
	            this.state = 803;
	            this.singleExpression(38);
	            break;

	        case 7:
	            localctx = new VoidExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 804;
	            this.match(JavaScriptParser.Void);
	            this.state = 805;
	            this.singleExpression(37);
	            break;

	        case 8:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 806;
	            this.match(JavaScriptParser.Typeof);
	            this.state = 807;
	            this.singleExpression(36);
	            break;

	        case 9:
	            localctx = new PreIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 808;
	            this.match(JavaScriptParser.PlusPlus);
	            this.state = 809;
	            this.singleExpression(35);
	            break;

	        case 10:
	            localctx = new PreDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 810;
	            this.match(JavaScriptParser.MinusMinus);
	            this.state = 811;
	            this.singleExpression(34);
	            break;

	        case 11:
	            localctx = new UnaryPlusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 812;
	            this.match(JavaScriptParser.Plus);
	            this.state = 813;
	            this.singleExpression(33);
	            break;

	        case 12:
	            localctx = new UnaryMinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 814;
	            this.match(JavaScriptParser.Minus);
	            this.state = 815;
	            this.singleExpression(32);
	            break;

	        case 13:
	            localctx = new BitNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 816;
	            this.match(JavaScriptParser.BitNot);
	            this.state = 817;
	            this.singleExpression(31);
	            break;

	        case 14:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 818;
	            this.match(JavaScriptParser.Not);
	            this.state = 819;
	            this.singleExpression(30);
	            break;

	        case 15:
	            localctx = new AwaitExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 820;
	            this.match(JavaScriptParser.Await);
	            this.state = 821;
	            this.singleExpression(29);
	            break;

	        case 16:
	            localctx = new ImportExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 822;
	            this.match(JavaScriptParser.Import);
	            this.state = 823;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 824;
	            this.singleExpression(0);
	            this.state = 825;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        case 17:
	            localctx = new YieldExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 827;
	            this.yieldStatement();
	            break;

	        case 18:
	            localctx = new ThisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 828;
	            this.match(JavaScriptParser.This);
	            break;

	        case 19:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 829;
	            this.identifier();
	            break;

	        case 20:
	            localctx = new SuperExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 830;
	            this.match(JavaScriptParser.Super);
	            break;

	        case 21:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 831;
	            this.literal();
	            break;

	        case 22:
	            localctx = new ArrayLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 832;
	            this.arrayLiteral();
	            break;

	        case 23:
	            localctx = new ObjectLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 833;
	            this.objectLiteral();
	            break;

	        case 24:
	            localctx = new JsxElementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 834;
	            this.jsxElements();
	            break;

	        case 25:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 835;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 836;
	            this.expressionSequence();
	            this.state = 837;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 922;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 920;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 841;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 842;
	                    this.match(JavaScriptParser.Power);
	                    this.state = 843;
	                    this.singleExpression(28);
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 844;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 845;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 29360128) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 846;
	                    this.singleExpression(28);
	                    break;

	                case 3:
	                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 847;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 848;
	                    _la = this._input.LA(1);
	                    if(!(_la===18 || _la===19)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 849;
	                    this.singleExpression(27);
	                    break;

	                case 4:
	                    localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 850;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 851;
	                    this.match(JavaScriptParser.NullCoalesce);
	                    this.state = 852;
	                    this.singleExpression(26);
	                    break;

	                case 5:
	                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 853;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 854;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1879048192) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 855;
	                    this.singleExpression(25);
	                    break;

	                case 6:
	                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 856;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 857;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 31)) & ~0x1f) === 0 && ((1 << (_la - 31)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 858;
	                    this.singleExpression(24);
	                    break;

	                case 7:
	                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 859;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 860;
	                    this.match(JavaScriptParser.Instanceof);
	                    this.state = 861;
	                    this.singleExpression(23);
	                    break;

	                case 8:
	                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 862;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 863;
	                    this.match(JavaScriptParser.In);
	                    this.state = 864;
	                    this.singleExpression(22);
	                    break;

	                case 9:
	                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 865;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 866;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 867;
	                    this.singleExpression(21);
	                    break;

	                case 10:
	                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 868;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 869;
	                    this.match(JavaScriptParser.BitAnd);
	                    this.state = 870;
	                    this.singleExpression(20);
	                    break;

	                case 11:
	                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 871;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 872;
	                    this.match(JavaScriptParser.BitXOr);
	                    this.state = 873;
	                    this.singleExpression(19);
	                    break;

	                case 12:
	                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 874;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 875;
	                    this.match(JavaScriptParser.BitOr);
	                    this.state = 876;
	                    this.singleExpression(18);
	                    break;

	                case 13:
	                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 877;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 878;
	                    this.match(JavaScriptParser.And);
	                    this.state = 879;
	                    this.singleExpression(17);
	                    break;

	                case 14:
	                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 880;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 881;
	                    this.match(JavaScriptParser.Or);
	                    this.state = 882;
	                    this.singleExpression(16);
	                    break;

	                case 15:
	                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 883;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 884;
	                    this.match(JavaScriptParser.QuestionMark);
	                    this.state = 885;
	                    this.singleExpression(0);
	                    this.state = 886;
	                    this.match(JavaScriptParser.Colon);
	                    this.state = 887;
	                    this.singleExpression(15);
	                    break;

	                case 16:
	                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 889;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 890;
	                    this.match(JavaScriptParser.Assign);
	                    this.state = 891;
	                    this.singleExpression(13);
	                    break;

	                case 17:
	                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 892;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 893;
	                    this.assignmentOperator();
	                    this.state = 894;
	                    this.singleExpression(12);
	                    break;

	                case 18:
	                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 896;
	                    if (!( this.precpred(this._ctx, 46))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 46)");
	                    }
	                    this.state = 897;
	                    this.match(JavaScriptParser.OpenBracket);
	                    this.state = 898;
	                    this.expressionSequence();
	                    this.state = 899;
	                    this.match(JavaScriptParser.CloseBracket);
	                    break;

	                case 19:
	                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 901;
	                    if (!( this.precpred(this._ctx, 45))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
	                    }
	                    this.state = 903;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===12) {
	                        this.state = 902;
	                        this.match(JavaScriptParser.QuestionMark);
	                    }

	                    this.state = 905;
	                    this.match(JavaScriptParser.Dot);
	                    this.state = 907;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===27) {
	                        this.state = 906;
	                        this.match(JavaScriptParser.Hashtag);
	                    }

	                    this.state = 909;
	                    this.identifierName();
	                    break;

	                case 20:
	                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 910;
	                    if (!( this.precpred(this._ctx, 42))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 42)");
	                    }
	                    this.state = 911;
	                    this.arguments();
	                    break;

	                case 21:
	                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 912;
	                    if (!( this.precpred(this._ctx, 40))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 40)");
	                    }
	                    this.state = 913;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 914;
	                    this.match(JavaScriptParser.PlusPlus);
	                    break;

	                case 22:
	                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 915;
	                    if (!( this.precpred(this._ctx, 39))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
	                    }
	                    this.state = 916;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 917;
	                    this.match(JavaScriptParser.MinusMinus);
	                    break;

	                case 23:
	                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 918;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 919;
	                    this.templateStringLiteral();
	                    break;

	                } 
	            }
	            this.state = 924;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	jsxElements() {
	    let localctx = new JsxElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JavaScriptParser.RULE_jsxElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 925;
	        		this.jsxElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 928; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,96, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxElementBegin() {
	    let localctx = new JsxElementBeginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JavaScriptParser.RULE_jsxElementBegin);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        _la = this._input.LA(1);
	        if(!(_la===2 || _la===132 || _la===144)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxElement() {
	    let localctx = new JsxElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JavaScriptParser.RULE_jsxElement);
	    try {
	        this.state = 937;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 932;
	            this.jsxSelfClosingElement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 933;
	            this.jsxOpeningElement();
	            this.state = 934;
	            this.jsxChildren();
	            this.state = 935;
	            this.jsxClosingElement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxSelfClosingElement() {
	    let localctx = new JsxSelfClosingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JavaScriptParser.RULE_jsxSelfClosingElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this.jsxElementBegin();
	        this.state = 940;
	        this.jsxSelfClosingElementName();
	        this.state = 942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===136 || _la===137) {
	            this.state = 941;
	            this.jsxAttributes();
	        }

	        this.state = 944;
	        this.match(JavaScriptParser.JsxOpeningElementSlashEnd);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxOpeningElement() {
	    let localctx = new JsxOpeningElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, JavaScriptParser.RULE_jsxOpeningElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.jsxElementBegin();
	        this.state = 947;
	        this.jsxOpeningElementName();
	        this.state = 949;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===136 || _la===137) {
	            this.state = 948;
	            this.jsxAttributes();
	        }

	        this.state = 951;
	        this.match(JavaScriptParser.JsxOpeningElementEnd);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxClosingElement() {
	    let localctx = new JsxClosingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JavaScriptParser.RULE_jsxClosingElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 953;
	        this.match(JavaScriptParser.JsxChildrenClosingElementSlashBegin);
	        this.state = 954;
	        this.jsxClosingElementName();
	        this.state = 955;
	        this.match(JavaScriptParser.JsxClosingElementEnd);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxChildren() {
	    let localctx = new JsxChildrenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JavaScriptParser.RULE_jsxChildren);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===143) {
	            this.state = 957;
	            this.match(JavaScriptParser.HtmlChardata);
	        }

	        this.state = 969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===7 || ((((_la - 132)) & ~0x1f) === 0 && ((1 << (_la - 132)) & 20497) !== 0)) {
	            this.state = 962;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	            case 132:
	            case 144:
	                this.state = 960;
	                this.jsxElement();
	                break;
	            case 7:
	            case 136:
	            case 146:
	                this.state = 961;
	                this.objectExpressionSequence();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===143) {
	                this.state = 964;
	                this.match(JavaScriptParser.HtmlChardata);
	            }

	            this.state = 971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxSelfClosingElementName() {
	    let localctx = new JsxSelfClosingElementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JavaScriptParser.RULE_jsxSelfClosingElementName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.match(JavaScriptParser.JsxOpeningElementId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxOpeningElementName() {
	    let localctx = new JsxOpeningElementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JavaScriptParser.RULE_jsxOpeningElementName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 974;
	        localctx._JsxOpeningElementId = this.match(JavaScriptParser.JsxOpeningElementId);
	        this.pushHtmlTagName((localctx._JsxOpeningElementId == null ? null : localctx._JsxOpeningElementId.text));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxClosingElementName() {
	    let localctx = new JsxClosingElementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JavaScriptParser.RULE_jsxClosingElementName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 977;
	        localctx._JsxClosingElementId = this.match(JavaScriptParser.JsxClosingElementId);
	        this.state = 978;
	        if (!( this.popHtmlTagName((localctx._JsxClosingElementId == null ? null : localctx._JsxClosingElementId.text)))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.popHtmlTagName($JsxClosingElementId.text)");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxAttributes() {
	    let localctx = new JsxAttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JavaScriptParser.RULE_jsxAttributes);
	    var _la = 0;
	    try {
	        this.state = 988;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 136:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 980;
	            this.jsxSpreadAttribute();
	            this.state = 982;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===136 || _la===137) {
	                this.state = 981;
	                this.jsxAttributes();
	            }

	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 984;
	            this.jsxAttribute();
	            this.state = 986;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===136 || _la===137) {
	                this.state = 985;
	                this.jsxAttributes();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxSpreadAttribute() {
	    let localctx = new JsxSpreadAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JavaScriptParser.RULE_jsxSpreadAttribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.match(JavaScriptParser.JsxOpeningElementOpenBrace);
	        this.state = 991;
	        this.match(JavaScriptParser.Ellipsis);
	        this.state = 992;
	        this.singleExpression(0);
	        this.state = 993;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxAttribute() {
	    let localctx = new JsxAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JavaScriptParser.RULE_jsxAttribute);
	    try {
	        this.state = 1000;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 995;
	            this.jsxAttributeName();
	            this.state = 996;
	            this.match(JavaScriptParser.JsxAssign);
	            this.state = 997;
	            this.jsxAttributeValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 999;
	            this.jsxAttributeName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxAttributeName() {
	    let localctx = new JsxAttributeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JavaScriptParser.RULE_jsxAttributeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        this.match(JavaScriptParser.JsxOpeningElementId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsxAttributeValue() {
	    let localctx = new JsxAttributeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JavaScriptParser.RULE_jsxAttributeValue);
	    try {
	        this.state = 1007;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 142:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1004;
	            this.match(JavaScriptParser.JsxAttributeValue);
	            break;
	        case 2:
	        case 132:
	        case 144:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1005;
	            this.jsxElement();
	            break;
	        case 7:
	        case 136:
	        case 146:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1006;
	            this.objectExpressionSequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignable() {
	    let localctx = new AssignableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JavaScriptParser.RULE_assignable);
	    try {
	        this.state = 1012;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 104:
	        case 108:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1009;
	            this.identifier();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1010;
	            this.arrayLiteral();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1011;
	            this.objectLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JavaScriptParser.RULE_objectLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 1026;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 8339628) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 1610612735) !== 0) || ((((_la - 125)) & ~0x1f) === 0 && ((1 << (_la - 125)) & 524417) !== 0)) {
	            this.state = 1015;
	            this.propertyAssignment();
	            this.state = 1020;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1016;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 1017;
	                    this.propertyAssignment(); 
	                }
	                this.state = 1022;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
	            }

	            this.state = 1024;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10) {
	                this.state = 1023;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 1028;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openBrace() {
	    let localctx = new OpenBraceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, JavaScriptParser.RULE_openBrace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1030;
	        _la = this._input.LA(1);
	        if(!(_la===7 || _la===136 || _la===146)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectExpressionSequence() {
	    let localctx = new ObjectExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, JavaScriptParser.RULE_objectExpressionSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1032;
	        this.openBrace();
	        this.state = 1033;
	        this.expressionSequence();
	        this.state = 1034;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anoymousFunction() {
	    let localctx = new AnoymousFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, JavaScriptParser.RULE_anoymousFunction);
	    var _la = 0;
	    try {
	        this.state = 1060;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1036;
	            this.functionDeclaration();
	            break;

	        case 2:
	            localctx = new AnoymousFunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1038;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===104) {
	                this.state = 1037;
	                this.match(JavaScriptParser.Async);
	            }

	            this.state = 1040;
	            this.match(JavaScriptParser.Function_);
	            this.state = 1042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 1041;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 1044;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 1046;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16520) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	                this.state = 1045;
	                this.formalParameterList();
	            }

	            this.state = 1048;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 1049;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 1050;
	            this.functionBody();
	            this.state = 1051;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 3:
	            localctx = new ArrowFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1054;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	            if(la_===1) {
	                this.state = 1053;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 1056;
	            this.arrowFunctionParameters();
	            this.state = 1057;
	            this.match(JavaScriptParser.ARROW);
	            this.state = 1058;
	            this.arrowFunctionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionParameters() {
	    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, JavaScriptParser.RULE_arrowFunctionParameters);
	    var _la = 0;
	    try {
	        this.state = 1068;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 104:
	        case 108:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1062;
	            this.identifier();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1063;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 1065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16520) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0)) {
	                this.state = 1064;
	                this.formalParameterList();
	            }

	            this.state = 1067;
	            this.match(JavaScriptParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionBody() {
	    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, JavaScriptParser.RULE_arrowFunctionBody);
	    try {
	        this.state = 1075;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1070;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1071;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 1072;
	            this.functionBody();
	            this.state = 1073;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, JavaScriptParser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1077;
	        _la = this._input.LA(1);
	        if(!(((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 4095) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, JavaScriptParser.RULE_literal);
	    try {
	        this.state = 1086;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1079;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1080;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1081;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1082;
	            this.templateStringLiteral();
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1083;
	            this.match(JavaScriptParser.RegularExpressionLiteral);
	            break;
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1084;
	            this.numericLiteral();
	            break;
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1085;
	            this.bigintLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringLiteral() {
	    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, JavaScriptParser.RULE_templateStringLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.match(JavaScriptParser.BackTick);
	        this.state = 1092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===130 || _la===131) {
	            this.state = 1089;
	            this.templateStringAtom();
	            this.state = 1094;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1095;
	        this.match(JavaScriptParser.BackTick);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringAtom() {
	    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, JavaScriptParser.RULE_templateStringAtom);
	    try {
	        this.state = 1102;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 131:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1097;
	            this.match(JavaScriptParser.TemplateStringAtom);
	            break;
	        case 130:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1098;
	            this.match(JavaScriptParser.TemplateStringStartExpression);
	            this.state = 1099;
	            this.singleExpression(0);
	            this.state = 1100;
	            this.match(JavaScriptParser.CloseBrace);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, JavaScriptParser.RULE_numericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1104;
	        _la = this._input.LA(1);
	        if(!(((((_la - 59)) & ~0x1f) === 0 && ((1 << (_la - 59)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bigintLiteral() {
	    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, JavaScriptParser.RULE_bigintLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1106;
	        _la = this._input.LA(1);
	        if(!(((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, JavaScriptParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108;
	        this.identifier();
	        this.state = 1109;
	        if (!( this.p("get"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.p(\"get\")");
	        }
	        this.state = 1110;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, JavaScriptParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this.identifier();
	        this.state = 1113;
	        if (!( this.p("set"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.p(\"set\")");
	        }
	        this.state = 1114;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierName() {
	    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, JavaScriptParser.RULE_identifierName);
	    try {
	        this.state = 1118;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1116;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1117;
	            this.reservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, JavaScriptParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1120;
	        _la = this._input.LA(1);
	        if(!(((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4113) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, JavaScriptParser.RULE_reservedWord);
	    try {
	        this.state = 1125;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1122;
	            this.keyword();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1123;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1124;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, JavaScriptParser.RULE_keyword);
	    try {
	        this.state = 1173;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1127;
	            this.match(JavaScriptParser.Break);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1128;
	            this.match(JavaScriptParser.Do);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1129;
	            this.match(JavaScriptParser.Instanceof);
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1130;
	            this.match(JavaScriptParser.Typeof);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1131;
	            this.match(JavaScriptParser.Case);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1132;
	            this.match(JavaScriptParser.Else);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1133;
	            this.match(JavaScriptParser.New);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1134;
	            this.match(JavaScriptParser.Var);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1135;
	            this.match(JavaScriptParser.Catch);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1136;
	            this.match(JavaScriptParser.Finally);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1137;
	            this.match(JavaScriptParser.Return);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1138;
	            this.match(JavaScriptParser.Void);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1139;
	            this.match(JavaScriptParser.Continue);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1140;
	            this.match(JavaScriptParser.For);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1141;
	            this.match(JavaScriptParser.Switch);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1142;
	            this.match(JavaScriptParser.While);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1143;
	            this.match(JavaScriptParser.Debugger);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1144;
	            this.match(JavaScriptParser.Function_);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1145;
	            this.match(JavaScriptParser.This);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1146;
	            this.match(JavaScriptParser.With);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1147;
	            this.match(JavaScriptParser.Default);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1148;
	            this.match(JavaScriptParser.If);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1149;
	            this.match(JavaScriptParser.Throw);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1150;
	            this.match(JavaScriptParser.Delete);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1151;
	            this.match(JavaScriptParser.In);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1152;
	            this.match(JavaScriptParser.Try);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1153;
	            this.match(JavaScriptParser.Class);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1154;
	            this.match(JavaScriptParser.Enum);
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1155;
	            this.match(JavaScriptParser.Extends);
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1156;
	            this.match(JavaScriptParser.Super);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1157;
	            this.match(JavaScriptParser.Const);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1158;
	            this.match(JavaScriptParser.Export);
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1159;
	            this.match(JavaScriptParser.Import);
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1160;
	            this.match(JavaScriptParser.Implements);
	            break;
	        case 107:
	        case 108:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1161;
	            this.let_();
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1162;
	            this.match(JavaScriptParser.Private);
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1163;
	            this.match(JavaScriptParser.Public);
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1164;
	            this.match(JavaScriptParser.Interface);
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1165;
	            this.match(JavaScriptParser.Package);
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1166;
	            this.match(JavaScriptParser.Protected);
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1167;
	            this.match(JavaScriptParser.Static);
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1168;
	            this.match(JavaScriptParser.Yield);
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1169;
	            this.match(JavaScriptParser.Async);
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1170;
	            this.match(JavaScriptParser.Await);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1171;
	            this.match(JavaScriptParser.From);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1172;
	            this.match(JavaScriptParser.As);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_() {
	    let localctx = new Let_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, JavaScriptParser.RULE_let_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1175;
	        _la = this._input.LA(1);
	        if(!(_la===107 || _la===108)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, JavaScriptParser.RULE_eos);
	    try {
	        this.state = 1181;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1177;
	            this.match(JavaScriptParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1178;
	            this.match(JavaScriptParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1179;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1180;
	            if (!( this.closeBrace())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JavaScriptParser.EOF = antlr4.Token.EOF;
JavaScriptParser.HashBangLine = 1;
JavaScriptParser.JsxElementBegin = 2;
JavaScriptParser.OpenBracket = 3;
JavaScriptParser.CloseBracket = 4;
JavaScriptParser.OpenParen = 5;
JavaScriptParser.CloseParen = 6;
JavaScriptParser.OpenBrace = 7;
JavaScriptParser.CloseBrace = 8;
JavaScriptParser.SemiColon = 9;
JavaScriptParser.Comma = 10;
JavaScriptParser.Assign = 11;
JavaScriptParser.QuestionMark = 12;
JavaScriptParser.Colon = 13;
JavaScriptParser.Ellipsis = 14;
JavaScriptParser.Dot = 15;
JavaScriptParser.PlusPlus = 16;
JavaScriptParser.MinusMinus = 17;
JavaScriptParser.Plus = 18;
JavaScriptParser.Minus = 19;
JavaScriptParser.BitNot = 20;
JavaScriptParser.Not = 21;
JavaScriptParser.Multiply = 22;
JavaScriptParser.Divide = 23;
JavaScriptParser.Modulus = 24;
JavaScriptParser.Power = 25;
JavaScriptParser.NullCoalesce = 26;
JavaScriptParser.Hashtag = 27;
JavaScriptParser.RightShiftArithmetic = 28;
JavaScriptParser.LeftShiftArithmetic = 29;
JavaScriptParser.RightShiftLogical = 30;
JavaScriptParser.LessThan = 31;
JavaScriptParser.MoreThan = 32;
JavaScriptParser.LessThanEquals = 33;
JavaScriptParser.GreaterThanEquals = 34;
JavaScriptParser.Equals_ = 35;
JavaScriptParser.NotEquals = 36;
JavaScriptParser.IdentityEquals = 37;
JavaScriptParser.IdentityNotEquals = 38;
JavaScriptParser.BitAnd = 39;
JavaScriptParser.BitXOr = 40;
JavaScriptParser.BitOr = 41;
JavaScriptParser.And = 42;
JavaScriptParser.Or = 43;
JavaScriptParser.MultiplyAssign = 44;
JavaScriptParser.DivideAssign = 45;
JavaScriptParser.ModulusAssign = 46;
JavaScriptParser.PlusAssign = 47;
JavaScriptParser.MinusAssign = 48;
JavaScriptParser.LeftShiftArithmeticAssign = 49;
JavaScriptParser.RightShiftArithmeticAssign = 50;
JavaScriptParser.RightShiftLogicalAssign = 51;
JavaScriptParser.BitAndAssign = 52;
JavaScriptParser.BitXorAssign = 53;
JavaScriptParser.BitOrAssign = 54;
JavaScriptParser.PowerAssign = 55;
JavaScriptParser.ARROW = 56;
JavaScriptParser.NullLiteral = 57;
JavaScriptParser.BooleanLiteral = 58;
JavaScriptParser.DecimalLiteral = 59;
JavaScriptParser.HexIntegerLiteral = 60;
JavaScriptParser.OctalIntegerLiteral = 61;
JavaScriptParser.OctalIntegerLiteral2 = 62;
JavaScriptParser.BinaryIntegerLiteral = 63;
JavaScriptParser.BigHexIntegerLiteral = 64;
JavaScriptParser.BigOctalIntegerLiteral = 65;
JavaScriptParser.BigBinaryIntegerLiteral = 66;
JavaScriptParser.BigDecimalIntegerLiteral = 67;
JavaScriptParser.Break = 68;
JavaScriptParser.Do = 69;
JavaScriptParser.Instanceof = 70;
JavaScriptParser.Typeof = 71;
JavaScriptParser.Case = 72;
JavaScriptParser.Else = 73;
JavaScriptParser.New = 74;
JavaScriptParser.Var = 75;
JavaScriptParser.Catch = 76;
JavaScriptParser.Finally = 77;
JavaScriptParser.Return = 78;
JavaScriptParser.Void = 79;
JavaScriptParser.Continue = 80;
JavaScriptParser.For = 81;
JavaScriptParser.Switch = 82;
JavaScriptParser.While = 83;
JavaScriptParser.Debugger = 84;
JavaScriptParser.Function_ = 85;
JavaScriptParser.This = 86;
JavaScriptParser.With = 87;
JavaScriptParser.Default = 88;
JavaScriptParser.If = 89;
JavaScriptParser.Throw = 90;
JavaScriptParser.Delete = 91;
JavaScriptParser.In = 92;
JavaScriptParser.Try = 93;
JavaScriptParser.As = 94;
JavaScriptParser.From = 95;
JavaScriptParser.YieldStar = 96;
JavaScriptParser.Class = 97;
JavaScriptParser.Enum = 98;
JavaScriptParser.Extends = 99;
JavaScriptParser.Super = 100;
JavaScriptParser.Const = 101;
JavaScriptParser.Export = 102;
JavaScriptParser.Import = 103;
JavaScriptParser.Async = 104;
JavaScriptParser.Await = 105;
JavaScriptParser.Implements = 106;
JavaScriptParser.StrictLet = 107;
JavaScriptParser.NonStrictLet = 108;
JavaScriptParser.Private = 109;
JavaScriptParser.Public = 110;
JavaScriptParser.Interface = 111;
JavaScriptParser.Package = 112;
JavaScriptParser.Protected = 113;
JavaScriptParser.Static = 114;
JavaScriptParser.Yield = 115;
JavaScriptParser.Identifier = 116;
JavaScriptParser.StringLiteral = 117;
JavaScriptParser.LinkLiteral = 118;
JavaScriptParser.BackTick = 119;
JavaScriptParser.WhiteSpaces = 120;
JavaScriptParser.LineTerminator = 121;
JavaScriptParser.JsxComment = 122;
JavaScriptParser.MultiLineComment = 123;
JavaScriptParser.SingleLineComment = 124;
JavaScriptParser.RegularExpressionLiteral = 125;
JavaScriptParser.HtmlComment = 126;
JavaScriptParser.CDataComment = 127;
JavaScriptParser.UnexpectedCharacter = 128;
JavaScriptParser.CDATA = 129;
JavaScriptParser.TemplateStringStartExpression = 130;
JavaScriptParser.TemplateStringAtom = 131;
JavaScriptParser.JsxOpeningElementBegin = 132;
JavaScriptParser.JsxOpeningElementEnd = 133;
JavaScriptParser.JsxOpeningElementSlashEnd = 134;
JavaScriptParser.JsxAssign = 135;
JavaScriptParser.JsxOpeningElementOpenBrace = 136;
JavaScriptParser.JsxOpeningElementId = 137;
JavaScriptParser.JsxOpeningElementWhiteSpaces = 138;
JavaScriptParser.JsxOpeningElementLineTerminator = 139;
JavaScriptParser.JsxOpeningElementMultiLineComment = 140;
JavaScriptParser.JsxOpeningElementSingleLineComment = 141;
JavaScriptParser.JsxAttributeValue = 142;
JavaScriptParser.HtmlChardata = 143;
JavaScriptParser.JsxChildrenOpeningElementBegin = 144;
JavaScriptParser.JsxChildrenClosingElementSlashBegin = 145;
JavaScriptParser.JsxChildrenOpenBrace = 146;
JavaScriptParser.JsxClosingElementEnd = 147;
JavaScriptParser.JsxClosingElementId = 148;
JavaScriptParser.JsxClosingElementLineTerminator = 149;
JavaScriptParser.JsxClosingElementWhiteSpaces = 150;

JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_moduleItems = 7;
JavaScriptParser.RULE_importDefault = 8;
JavaScriptParser.RULE_importNamespace = 9;
JavaScriptParser.RULE_importFrom = 10;
JavaScriptParser.RULE_aliasName = 11;
JavaScriptParser.RULE_exportStatement = 12;
JavaScriptParser.RULE_exportFromBlock = 13;
JavaScriptParser.RULE_declaration = 14;
JavaScriptParser.RULE_variableStatement = 15;
JavaScriptParser.RULE_variableDeclarationList = 16;
JavaScriptParser.RULE_variableDeclaration = 17;
JavaScriptParser.RULE_emptyStatement_ = 18;
JavaScriptParser.RULE_expressionStatement = 19;
JavaScriptParser.RULE_ifStatement = 20;
JavaScriptParser.RULE_iterationStatement = 21;
JavaScriptParser.RULE_varModifier = 22;
JavaScriptParser.RULE_continueStatement = 23;
JavaScriptParser.RULE_breakStatement = 24;
JavaScriptParser.RULE_returnStatement = 25;
JavaScriptParser.RULE_yieldStatement = 26;
JavaScriptParser.RULE_withStatement = 27;
JavaScriptParser.RULE_switchStatement = 28;
JavaScriptParser.RULE_caseBlock = 29;
JavaScriptParser.RULE_caseClauses = 30;
JavaScriptParser.RULE_caseClause = 31;
JavaScriptParser.RULE_defaultClause = 32;
JavaScriptParser.RULE_labelledStatement = 33;
JavaScriptParser.RULE_throwStatement = 34;
JavaScriptParser.RULE_tryStatement = 35;
JavaScriptParser.RULE_catchProduction = 36;
JavaScriptParser.RULE_finallyProduction = 37;
JavaScriptParser.RULE_debuggerStatement = 38;
JavaScriptParser.RULE_functionDeclaration = 39;
JavaScriptParser.RULE_classDeclaration = 40;
JavaScriptParser.RULE_classTail = 41;
JavaScriptParser.RULE_classElement = 42;
JavaScriptParser.RULE_methodDefinition = 43;
JavaScriptParser.RULE_formalParameterList = 44;
JavaScriptParser.RULE_formalParameterArg = 45;
JavaScriptParser.RULE_lastFormalParameterArg = 46;
JavaScriptParser.RULE_functionBody = 47;
JavaScriptParser.RULE_sourceElements = 48;
JavaScriptParser.RULE_arrayLiteral = 49;
JavaScriptParser.RULE_elementList = 50;
JavaScriptParser.RULE_arrayElement = 51;
JavaScriptParser.RULE_propertyAssignment = 52;
JavaScriptParser.RULE_propertyName = 53;
JavaScriptParser.RULE_arguments = 54;
JavaScriptParser.RULE_argument = 55;
JavaScriptParser.RULE_expressionSequence = 56;
JavaScriptParser.RULE_singleExpression = 57;
JavaScriptParser.RULE_jsxElements = 58;
JavaScriptParser.RULE_jsxElementBegin = 59;
JavaScriptParser.RULE_jsxElement = 60;
JavaScriptParser.RULE_jsxSelfClosingElement = 61;
JavaScriptParser.RULE_jsxOpeningElement = 62;
JavaScriptParser.RULE_jsxClosingElement = 63;
JavaScriptParser.RULE_jsxChildren = 64;
JavaScriptParser.RULE_jsxSelfClosingElementName = 65;
JavaScriptParser.RULE_jsxOpeningElementName = 66;
JavaScriptParser.RULE_jsxClosingElementName = 67;
JavaScriptParser.RULE_jsxAttributes = 68;
JavaScriptParser.RULE_jsxSpreadAttribute = 69;
JavaScriptParser.RULE_jsxAttribute = 70;
JavaScriptParser.RULE_jsxAttributeName = 71;
JavaScriptParser.RULE_jsxAttributeValue = 72;
JavaScriptParser.RULE_assignable = 73;
JavaScriptParser.RULE_objectLiteral = 74;
JavaScriptParser.RULE_openBrace = 75;
JavaScriptParser.RULE_objectExpressionSequence = 76;
JavaScriptParser.RULE_anoymousFunction = 77;
JavaScriptParser.RULE_arrowFunctionParameters = 78;
JavaScriptParser.RULE_arrowFunctionBody = 79;
JavaScriptParser.RULE_assignmentOperator = 80;
JavaScriptParser.RULE_literal = 81;
JavaScriptParser.RULE_templateStringLiteral = 82;
JavaScriptParser.RULE_templateStringAtom = 83;
JavaScriptParser.RULE_numericLiteral = 84;
JavaScriptParser.RULE_bigintLiteral = 85;
JavaScriptParser.RULE_getter = 86;
JavaScriptParser.RULE_setter = 87;
JavaScriptParser.RULE_identifierName = 88;
JavaScriptParser.RULE_identifier = 89;
JavaScriptParser.RULE_reservedWord = 90;
JavaScriptParser.RULE_keyword = 91;
JavaScriptParser.RULE_let_ = 92;
JavaScriptParser.RULE_eos = 93;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_program;
    }

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	HashBangLine() {
	    return this.getToken(JavaScriptParser.HashBangLine, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSourceElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	labelledStatement() {
	    return this.getTypedRuleContext(LabelledStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	debuggerStatement() {
	    return this.getTypedRuleContext(DebuggerStatementContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importStatement;
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	importFromBlock() {
	    return this.getTypedRuleContext(ImportFromBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
    }

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	moduleItems() {
	    return this.getTypedRuleContext(ModuleItemsContext,0);
	};

	importDefault() {
	    return this.getTypedRuleContext(ImportDefaultContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFromBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_moduleItems;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	aliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AliasNameContext);
	    } else {
	        return this.getTypedRuleContext(AliasNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterModuleItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitModuleItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitModuleItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importDefault;
    }

	aliasName() {
	    return this.getTypedRuleContext(AliasNameContext,0);
	};

	Comma() {
	    return this.getToken(JavaScriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportNamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importNamespace;
    }

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportNamespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFrom;
    }

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFrom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportFrom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_aliasName;
    }

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAliasName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAliasName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExportDefaultDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDefaultDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDefaultDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportDefaultDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

class ExportDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exportFromBlock() {
	    return this.getTypedRuleContext(ExportFromBlockContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;

class ExportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
    }

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	moduleItems() {
	    return this.getTypedRuleContext(ModuleItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportFromBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_declaration;
    }

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableStatement;
    }

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
    }

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_emptyStatement_;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEmptyStatement_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEmptyStatement_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEmptyStatement_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.DoStatementContext = DoStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.SemiColon);
	    } else {
	        return this.getToken(JavaScriptParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForInStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForInStatementContext = ForInStatementContext;

class ForOfStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForOfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForOfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForOfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForOfStatementContext = ForOfStatementContext;

class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_varModifier;
    }

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVarModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVarModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVarModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	jsxElements() {
	    return this.getTypedRuleContext(JsxElementsContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
    }

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	YieldStar() {
	    return this.getToken(JavaScriptParser.YieldStar, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitYieldStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWithStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDefaultClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDefaultClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDefaultClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLabelledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLabelledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_tryStatement;
    }

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catchProduction() {
	    return this.getTypedRuleContext(CatchProductionContext,0);
	};

	finallyProduction() {
	    return this.getTypedRuleContext(FinallyProductionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_catchProduction;
    }

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCatchProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCatchProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCatchProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
    }

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFinallyProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFinallyProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFinallyProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DebuggerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
    }

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDebuggerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDebuggerStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDebuggerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
    }

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classTail;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	classElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassElementContext);
	    } else {
	        return this.getTypedRuleContext(ClassElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassTail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classElement;
    }

	methodDefinition() {
	    return this.getTypedRuleContext(MethodDefinitionContext,0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	Static = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Static);
	    } else {
	        return this.getToken(JavaScriptParser.Static, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	Async = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Async);
	    } else {
	        return this.getToken(JavaScriptParser.Async, i);
	    }
	};


	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMethodDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMethodDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMethodDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
    }

	formalParameterArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterArgContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterArgContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	lastFormalParameterArg() {
	    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastFormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
    }

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLastFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLastFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLastFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionBody;
    }

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElements;
    }

	sourceElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceElementContext);
	    } else {
	        return this.getTypedRuleContext(SourceElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSourceElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_elementList;
    }

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	arrayElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayElementContext);
	    } else {
	        return this.getTypedRuleContext(ArrayElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayElement;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterComputedPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitComputedPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitComputedPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

class PropertyShorthandContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyShorthand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyShorthand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyShorthand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;

class PropertySetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	formalParameterArg() {
	    return this.getTypedRuleContext(FormalParameterArgContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertySetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertySetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertySetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyGetterContext = PropertyGetterContext;

class FunctionPropertyContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;

class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_argument;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Ellipsis);
	    } else {
	        return this.getToken(JavaScriptParser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_singleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TemplateStringExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

class TernaryExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(JavaScriptParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PowerExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Power() {
	    return this.getToken(JavaScriptParser.Power, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPowerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPowerExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPowerExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PowerExpressionContext = PowerExpressionContext;

class PreIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class ObjectLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitObjectLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

class MetaExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMetaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMetaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMetaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MetaExpressionContext = MetaExpressionContext;

class InExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitInExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.InExpressionContext = InExpressionContext;

class LogicalOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(JavaScriptParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class NotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(JavaScriptParser.Not, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPreDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class JsxElementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	jsxElements() {
	    return this.getTypedRuleContext(JsxElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxElementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxElementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxElementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.JsxElementExpressionContext = JsxElementExpressionContext;

class ArgumentsExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgumentsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgumentsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArgumentsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class AwaitExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAwaitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAwaitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAwaitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;

class ThisExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThisExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitThisExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ThisExpressionContext = ThisExpressionContext;

class FunctionExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	anoymousFunction() {
	    return this.getTypedRuleContext(AnoymousFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;

class UnaryMinusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryMinusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryMinusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitUnaryMinusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class AssignmentExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

class PostDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPostDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class TypeofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTypeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTypeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTypeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;

class InstanceofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInstanceofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInstanceofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitInstanceofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

class UnaryPlusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryPlusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryPlusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitUnaryPlusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

class DeleteExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeleteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeleteExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDeleteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;

class ImportExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ImportExpressionContext = ImportExpressionContext;

class EqualityExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Equals_() {
	    return this.getToken(JavaScriptParser.Equals_, 0);
	};

	NotEquals() {
	    return this.getToken(JavaScriptParser.NotEquals, 0);
	};

	IdentityEquals() {
	    return this.getToken(JavaScriptParser.IdentityEquals, 0);
	};

	IdentityNotEquals() {
	    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitXOr() {
	    return this.getToken(JavaScriptParser.BitXOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitXOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitXOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitXOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

class SuperExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSuperExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSuperExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSuperExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.SuperExpressionContext = SuperExpressionContext;

class MultiplicativeExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(JavaScriptParser.Divide, 0);
	};

	Modulus() {
	    return this.getToken(JavaScriptParser.Modulus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LeftShiftArithmetic() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
	};

	RightShiftLogical() {
	    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class AdditiveExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(JavaScriptParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(JavaScriptParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(JavaScriptParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;

class PostIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class YieldExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitYieldExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.YieldExpressionContext = YieldExpressionContext;

class BitNotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(JavaScriptParser.BitNot, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNewExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNewExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;

class ArrayLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberDotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberDotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMemberDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

class ClassExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ClassExpressionContext = ClassExpressionContext;

class MemberIndexExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberIndexExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMemberIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitAnd() {
	    return this.getToken(JavaScriptParser.BitAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;

class BitOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitOr() {
	    return this.getToken(JavaScriptParser.BitOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;

class AssignmentOperatorExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

class VoidExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVoidExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVoidExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVoidExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.VoidExpressionContext = VoidExpressionContext;

class CoalesceExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	NullCoalesce() {
	    return this.getToken(JavaScriptParser.NullCoalesce, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCoalesceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCoalesceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCoalesceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

class JsxElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxElements;
    }

	jsxElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JsxElementContext);
	    } else {
	        return this.getTypedRuleContext(JsxElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxElementBeginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxElementBegin;
    }

	JsxElementBegin() {
	    return this.getToken(JavaScriptParser.JsxElementBegin, 0);
	};

	JsxOpeningElementBegin() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementBegin, 0);
	};

	JsxChildrenOpeningElementBegin() {
	    return this.getToken(JavaScriptParser.JsxChildrenOpeningElementBegin, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxElementBegin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxElementBegin(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxElementBegin(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxElement;
    }

	jsxSelfClosingElement() {
	    return this.getTypedRuleContext(JsxSelfClosingElementContext,0);
	};

	jsxOpeningElement() {
	    return this.getTypedRuleContext(JsxOpeningElementContext,0);
	};

	jsxChildren() {
	    return this.getTypedRuleContext(JsxChildrenContext,0);
	};

	jsxClosingElement() {
	    return this.getTypedRuleContext(JsxClosingElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxSelfClosingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxSelfClosingElement;
    }

	jsxElementBegin() {
	    return this.getTypedRuleContext(JsxElementBeginContext,0);
	};

	jsxSelfClosingElementName() {
	    return this.getTypedRuleContext(JsxSelfClosingElementNameContext,0);
	};

	JsxOpeningElementSlashEnd() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementSlashEnd, 0);
	};

	jsxAttributes() {
	    return this.getTypedRuleContext(JsxAttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxSelfClosingElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxSelfClosingElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxSelfClosingElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxOpeningElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxOpeningElement;
    }

	jsxElementBegin() {
	    return this.getTypedRuleContext(JsxElementBeginContext,0);
	};

	jsxOpeningElementName() {
	    return this.getTypedRuleContext(JsxOpeningElementNameContext,0);
	};

	JsxOpeningElementEnd() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementEnd, 0);
	};

	jsxAttributes() {
	    return this.getTypedRuleContext(JsxAttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxOpeningElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxOpeningElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxOpeningElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxClosingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxClosingElement;
    }

	JsxChildrenClosingElementSlashBegin() {
	    return this.getToken(JavaScriptParser.JsxChildrenClosingElementSlashBegin, 0);
	};

	jsxClosingElementName() {
	    return this.getTypedRuleContext(JsxClosingElementNameContext,0);
	};

	JsxClosingElementEnd() {
	    return this.getToken(JavaScriptParser.JsxClosingElementEnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxClosingElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxClosingElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxClosingElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxChildrenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxChildren;
    }

	HtmlChardata = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.HtmlChardata);
	    } else {
	        return this.getToken(JavaScriptParser.HtmlChardata, i);
	    }
	};


	jsxElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JsxElementContext);
	    } else {
	        return this.getTypedRuleContext(JsxElementContext,i);
	    }
	};

	objectExpressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ObjectExpressionSequenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxChildren(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxChildren(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxChildren(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxSelfClosingElementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxSelfClosingElementName;
    }

	JsxOpeningElementId() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxSelfClosingElementName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxSelfClosingElementName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxSelfClosingElementName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxOpeningElementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxOpeningElementName;
        this._JsxOpeningElementId = null;
    }

	JsxOpeningElementId() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxOpeningElementName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxOpeningElementName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxOpeningElementName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxClosingElementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxClosingElementName;
        this._JsxClosingElementId = null;
    }

	JsxClosingElementId() {
	    return this.getToken(JavaScriptParser.JsxClosingElementId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxClosingElementName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxClosingElementName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxClosingElementName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxAttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxAttributes;
    }

	jsxSpreadAttribute() {
	    return this.getTypedRuleContext(JsxSpreadAttributeContext,0);
	};

	jsxAttributes() {
	    return this.getTypedRuleContext(JsxAttributesContext,0);
	};

	jsxAttribute() {
	    return this.getTypedRuleContext(JsxAttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxAttributes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxAttributes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxSpreadAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxSpreadAttribute;
    }

	JsxOpeningElementOpenBrace() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementOpenBrace, 0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxSpreadAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxSpreadAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxSpreadAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxAttribute;
    }

	jsxAttributeName() {
	    return this.getTypedRuleContext(JsxAttributeNameContext,0);
	};

	JsxAssign() {
	    return this.getToken(JavaScriptParser.JsxAssign, 0);
	};

	jsxAttributeValue() {
	    return this.getTypedRuleContext(JsxAttributeValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxAttributeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxAttributeName;
    }

	JsxOpeningElementId() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxAttributeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxAttributeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxAttributeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsxAttributeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_jsxAttributeValue;
    }

	JsxAttributeValue() {
	    return this.getToken(JavaScriptParser.JsxAttributeValue, 0);
	};

	jsxElement() {
	    return this.getTypedRuleContext(JsxElementContext,0);
	};

	objectExpressionSequence() {
	    return this.getTypedRuleContext(ObjectExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterJsxAttributeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitJsxAttributeValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitJsxAttributeValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitObjectLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenBraceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_openBrace;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	JsxOpeningElementOpenBrace() {
	    return this.getToken(JavaScriptParser.JsxOpeningElementOpenBrace, 0);
	};

	JsxChildrenOpenBrace() {
	    return this.getToken(JavaScriptParser.JsxChildrenOpenBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterOpenBrace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitOpenBrace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitOpenBrace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_objectExpressionSequence;
    }

	openBrace() {
	    return this.getTypedRuleContext(OpenBraceContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectExpressionSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectExpressionSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitObjectExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnoymousFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_anoymousFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnoymousFunctionDeclContext extends AnoymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAnoymousFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAnoymousFunctionDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAnoymousFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AnoymousFunctionDeclContext = AnoymousFunctionDeclContext;

class ArrowFunctionContext extends AnoymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrowFunctionParameters() {
	    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
	};

	ARROW() {
	    return this.getToken(JavaScriptParser.ARROW, 0);
	};

	arrowFunctionBody() {
	    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;

class FunctionDeclContext extends AnoymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionDeclContext = FunctionDeclContext;

class ArrowFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(JavaScriptParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(JavaScriptParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(JavaScriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(JavaScriptParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(JavaScriptParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(JavaScriptParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(JavaScriptParser.BitOrAssign, 0);
	};

	PowerAssign() {
	    return this.getToken(JavaScriptParser.PowerAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_literal;
    }

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	RegularExpressionLiteral() {
	    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	bigintLiteral() {
	    return this.getTypedRuleContext(BigintLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_templateStringLiteral;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.BackTick);
	    } else {
	        return this.getToken(JavaScriptParser.BackTick, i);
	    }
	};


	templateStringAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateStringAtomContext);
	    } else {
	        return this.getTypedRuleContext(TemplateStringAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_templateStringAtom;
    }

	TemplateStringAtom() {
	    return this.getToken(JavaScriptParser.TemplateStringAtom, 0);
	};

	TemplateStringStartExpression() {
	    return this.getToken(JavaScriptParser.TemplateStringStartExpression, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
    }

	DecimalLiteral() {
	    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
	};

	OctalIntegerLiteral2() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
	};

	BinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BigintLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
    }

	BigDecimalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
	};

	BigHexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
	};

	BigOctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
	};

	BigBinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBigintLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBigintLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBigintLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_getter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_setter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifierName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifierName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(JavaScriptParser.Identifier, 0);
	};

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_reservedWord;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	Enum() {
	    return this.getToken(JavaScriptParser.Enum, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	Implements() {
	    return this.getToken(JavaScriptParser.Implements, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Private() {
	    return this.getToken(JavaScriptParser.Private, 0);
	};

	Public() {
	    return this.getToken(JavaScriptParser.Public, 0);
	};

	Interface() {
	    return this.getToken(JavaScriptParser.Interface, 0);
	};

	Package() {
	    return this.getToken(JavaScriptParser.Package, 0);
	};

	Protected() {
	    return this.getToken(JavaScriptParser.Protected, 0);
	};

	Static() {
	    return this.getToken(JavaScriptParser.Static, 0);
	};

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Let_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_let_;
    }

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	StrictLet() {
	    return this.getToken(JavaScriptParser.StrictLet, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLet_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLet_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLet_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEos(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




JavaScriptParser.ProgramContext = ProgramContext; 
JavaScriptParser.SourceElementContext = SourceElementContext; 
JavaScriptParser.StatementContext = StatementContext; 
JavaScriptParser.BlockContext = BlockContext; 
JavaScriptParser.StatementListContext = StatementListContext; 
JavaScriptParser.ImportStatementContext = ImportStatementContext; 
JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext; 
JavaScriptParser.ModuleItemsContext = ModuleItemsContext; 
JavaScriptParser.ImportDefaultContext = ImportDefaultContext; 
JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext; 
JavaScriptParser.ImportFromContext = ImportFromContext; 
JavaScriptParser.AliasNameContext = AliasNameContext; 
JavaScriptParser.ExportStatementContext = ExportStatementContext; 
JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext; 
JavaScriptParser.DeclarationContext = DeclarationContext; 
JavaScriptParser.VariableStatementContext = VariableStatementContext; 
JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext; 
JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext; 
JavaScriptParser.EmptyStatement_Context = EmptyStatement_Context; 
JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext; 
JavaScriptParser.IfStatementContext = IfStatementContext; 
JavaScriptParser.IterationStatementContext = IterationStatementContext; 
JavaScriptParser.VarModifierContext = VarModifierContext; 
JavaScriptParser.ContinueStatementContext = ContinueStatementContext; 
JavaScriptParser.BreakStatementContext = BreakStatementContext; 
JavaScriptParser.ReturnStatementContext = ReturnStatementContext; 
JavaScriptParser.YieldStatementContext = YieldStatementContext; 
JavaScriptParser.WithStatementContext = WithStatementContext; 
JavaScriptParser.SwitchStatementContext = SwitchStatementContext; 
JavaScriptParser.CaseBlockContext = CaseBlockContext; 
JavaScriptParser.CaseClausesContext = CaseClausesContext; 
JavaScriptParser.CaseClauseContext = CaseClauseContext; 
JavaScriptParser.DefaultClauseContext = DefaultClauseContext; 
JavaScriptParser.LabelledStatementContext = LabelledStatementContext; 
JavaScriptParser.ThrowStatementContext = ThrowStatementContext; 
JavaScriptParser.TryStatementContext = TryStatementContext; 
JavaScriptParser.CatchProductionContext = CatchProductionContext; 
JavaScriptParser.FinallyProductionContext = FinallyProductionContext; 
JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext; 
JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext; 
JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext; 
JavaScriptParser.ClassTailContext = ClassTailContext; 
JavaScriptParser.ClassElementContext = ClassElementContext; 
JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext; 
JavaScriptParser.FormalParameterListContext = FormalParameterListContext; 
JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext; 
JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext; 
JavaScriptParser.FunctionBodyContext = FunctionBodyContext; 
JavaScriptParser.SourceElementsContext = SourceElementsContext; 
JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext; 
JavaScriptParser.ElementListContext = ElementListContext; 
JavaScriptParser.ArrayElementContext = ArrayElementContext; 
JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext; 
JavaScriptParser.PropertyNameContext = PropertyNameContext; 
JavaScriptParser.ArgumentsContext = ArgumentsContext; 
JavaScriptParser.ArgumentContext = ArgumentContext; 
JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext; 
JavaScriptParser.SingleExpressionContext = SingleExpressionContext; 
JavaScriptParser.JsxElementsContext = JsxElementsContext; 
JavaScriptParser.JsxElementBeginContext = JsxElementBeginContext; 
JavaScriptParser.JsxElementContext = JsxElementContext; 
JavaScriptParser.JsxSelfClosingElementContext = JsxSelfClosingElementContext; 
JavaScriptParser.JsxOpeningElementContext = JsxOpeningElementContext; 
JavaScriptParser.JsxClosingElementContext = JsxClosingElementContext; 
JavaScriptParser.JsxChildrenContext = JsxChildrenContext; 
JavaScriptParser.JsxSelfClosingElementNameContext = JsxSelfClosingElementNameContext; 
JavaScriptParser.JsxOpeningElementNameContext = JsxOpeningElementNameContext; 
JavaScriptParser.JsxClosingElementNameContext = JsxClosingElementNameContext; 
JavaScriptParser.JsxAttributesContext = JsxAttributesContext; 
JavaScriptParser.JsxSpreadAttributeContext = JsxSpreadAttributeContext; 
JavaScriptParser.JsxAttributeContext = JsxAttributeContext; 
JavaScriptParser.JsxAttributeNameContext = JsxAttributeNameContext; 
JavaScriptParser.JsxAttributeValueContext = JsxAttributeValueContext; 
JavaScriptParser.AssignableContext = AssignableContext; 
JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext; 
JavaScriptParser.OpenBraceContext = OpenBraceContext; 
JavaScriptParser.ObjectExpressionSequenceContext = ObjectExpressionSequenceContext; 
JavaScriptParser.AnoymousFunctionContext = AnoymousFunctionContext; 
JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext; 
JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext; 
JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext; 
JavaScriptParser.LiteralContext = LiteralContext; 
JavaScriptParser.TemplateStringLiteralContext = TemplateStringLiteralContext; 
JavaScriptParser.TemplateStringAtomContext = TemplateStringAtomContext; 
JavaScriptParser.NumericLiteralContext = NumericLiteralContext; 
JavaScriptParser.BigintLiteralContext = BigintLiteralContext; 
JavaScriptParser.GetterContext = GetterContext; 
JavaScriptParser.SetterContext = SetterContext; 
JavaScriptParser.IdentifierNameContext = IdentifierNameContext; 
JavaScriptParser.IdentifierContext = IdentifierContext; 
JavaScriptParser.ReservedWordContext = ReservedWordContext; 
JavaScriptParser.KeywordContext = KeywordContext; 
JavaScriptParser.Let_Context = Let_Context; 
JavaScriptParser.EosContext = EosContext; 
