// Generated from JavaScriptLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


import JavaScriptLexerBase from './JavaScriptLexerBase.js';

const serializedATN = [4,0,150,1468,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,
7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,
7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,
2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,
32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,
46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,
2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,
61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,
7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,
75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,
2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,
90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,
7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,
2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,
2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,
2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,
2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,
2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,
2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,
2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,
2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,
2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,
2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,1,0,1,0,1,0,1,0,1,0,5,0,
371,8,0,10,0,12,0,374,9,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,
16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,
1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,
1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,
1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,
56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,547,8,57,
1,58,1,58,1,58,1,58,5,58,553,8,58,10,58,12,58,556,9,58,1,58,3,58,559,8,58,
1,58,1,58,1,58,5,58,564,8,58,10,58,12,58,567,9,58,1,58,3,58,570,8,58,1,58,
1,58,3,58,574,8,58,3,58,576,8,58,1,59,1,59,1,59,1,59,5,59,582,8,59,10,59,
12,59,585,9,59,1,60,1,60,4,60,589,8,60,11,60,12,60,590,1,60,1,60,1,61,1,
61,1,61,1,61,5,61,599,8,61,10,61,12,61,602,9,61,1,62,1,62,1,62,1,62,5,62,
608,8,62,10,62,12,62,611,9,62,1,63,1,63,1,63,1,63,5,63,617,8,63,10,63,12,
63,620,9,63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,628,8,64,10,64,12,64,631,
9,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,639,8,65,10,65,12,65,642,9,65,1,
65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,
70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,
1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,
76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,
1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,
80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,
1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,
84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,
1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,
89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,
1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,
95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,
1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,
1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,
1,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,
1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
1,106,1,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,
1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,
1,114,1,114,1,114,1,114,1,114,1,115,1,115,5,115,974,8,115,10,115,12,115,
977,9,115,1,116,1,116,5,116,981,8,116,10,116,12,116,984,9,116,1,116,1,116,
1,116,5,116,989,8,116,10,116,12,116,992,9,116,1,116,3,116,995,8,116,1,116,
1,116,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1005,8,117,1,117,1,117,1,
117,1,117,1,117,1,117,1,117,3,117,1014,8,117,1,117,1,117,1,117,1,117,1,117,
4,117,1021,8,117,11,117,12,117,1022,1,118,1,118,1,118,1,118,1,118,1,119,
4,119,1031,8,119,11,119,12,119,1032,1,119,1,119,1,120,1,120,1,120,1,120,
1,121,1,121,1,121,1,121,1,121,5,121,1046,8,121,10,121,12,121,1049,9,121,
1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,5,122,1061,8,
122,10,122,12,122,1064,9,122,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,
123,1,123,5,123,1075,8,123,10,123,12,123,1078,9,123,1,123,1,123,1,124,1,
124,1,124,5,124,1085,8,124,10,124,12,124,1088,9,124,1,124,1,124,1,124,5,
124,1093,8,124,10,124,12,124,1096,9,124,1,125,1,125,1,125,1,125,1,125,1,
125,5,125,1104,8,125,10,125,12,125,1107,9,125,1,125,1,125,1,125,1,125,1,
125,1,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,
126,5,126,1126,8,126,10,126,12,126,1129,9,126,1,126,1,126,1,126,1,126,1,
126,1,126,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,1,
128,1,128,1,128,1,128,1,128,5,128,1152,8,128,10,128,12,128,1155,9,128,1,
128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,1,
130,1,130,1,130,1,130,1,130,1,131,1,131,1,132,1,132,1,132,1,132,1,133,1,
133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,1,134,1,135,1,135,1,136,1,
136,1,136,1,136,1,136,1,137,1,137,5,137,1199,8,137,10,137,12,137,1202,9,
137,1,138,4,138,1205,8,138,11,138,12,138,1206,1,138,1,138,1,139,1,139,1,
139,1,139,1,140,1,140,1,140,1,140,5,140,1219,8,140,10,140,12,140,1222,9,
140,1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,5,141,1233,8,141,
10,141,12,141,1236,9,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,3,142,
1245,8,142,1,143,4,143,1248,8,143,11,143,12,143,1249,1,144,1,144,1,144,1,
144,1,145,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,
147,1,147,1,147,1,147,1,148,1,148,5,148,1273,8,148,10,148,12,148,1276,9,
148,1,149,1,149,1,149,1,149,1,150,4,150,1283,8,150,11,150,12,150,1284,1,
150,1,150,1,151,3,151,1290,8,151,1,152,4,152,1293,8,152,11,152,12,152,1294,
1,152,3,152,1298,8,152,1,153,1,153,4,153,1302,8,153,11,153,12,153,1303,1,
154,4,154,1307,8,154,11,154,12,154,1308,1,154,3,154,1312,8,154,1,155,1,155,
5,155,1316,8,155,10,155,12,155,1319,9,155,1,155,1,155,1,156,1,156,5,156,
1325,8,156,10,156,12,156,1328,9,156,1,156,1,156,1,157,3,157,1333,8,157,1,
158,1,158,1,158,1,158,3,158,1339,8,158,1,159,1,159,1,160,1,160,1,160,1,160,
3,160,1347,8,160,1,161,1,161,1,161,1,161,3,161,1353,8,161,1,162,1,162,1,
162,1,162,1,162,3,162,1360,8,162,1,163,1,163,3,163,1364,8,163,1,164,1,164,
1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
4,165,1380,8,165,11,165,12,165,1381,1,165,1,165,3,165,1386,8,165,1,166,1,
166,1,166,4,166,1391,8,166,11,166,12,166,1392,1,166,1,166,1,167,1,167,1,
168,1,168,1,169,1,169,3,169,1403,8,169,1,170,1,170,1,170,1,171,1,171,1,172,
1,172,1,172,5,172,1413,8,172,10,172,12,172,1416,9,172,3,172,1418,8,172,1,
173,1,173,3,173,1422,8,173,1,173,4,173,1425,8,173,11,173,12,173,1426,1,174,
1,174,3,174,1431,8,174,1,175,1,175,1,175,3,175,1436,8,175,1,176,1,176,1,
176,1,176,5,176,1442,8,176,10,176,12,176,1445,9,176,1,176,3,176,1448,8,176,
1,177,1,177,1,177,1,177,5,177,1454,8,177,10,177,12,177,1457,9,177,1,177,
3,177,1460,8,177,1,178,1,178,3,178,1464,8,178,1,179,1,179,1,179,6,1047,1062,
1105,1127,1153,1220,0,180,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,
25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,
49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,
73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,
97,47,99,48,101,49,103,50,105,51,107,52,109,53,111,54,113,55,115,56,117,
57,119,58,121,59,123,60,125,61,127,62,129,63,131,64,133,65,135,66,137,67,
139,68,141,69,143,70,145,71,147,72,149,73,151,74,153,75,155,76,157,77,159,
78,161,79,163,80,165,81,167,82,169,83,171,84,173,85,175,86,177,87,179,88,
181,89,183,90,185,91,187,92,189,93,191,94,193,95,195,96,197,97,199,98,201,
99,203,100,205,101,207,102,209,103,211,104,213,105,215,106,217,107,219,108,
221,109,223,110,225,111,227,112,229,113,231,114,233,115,235,116,237,117,
239,118,241,119,243,120,245,121,247,122,249,123,251,124,253,125,255,126,
257,127,259,128,261,129,263,0,265,130,267,131,269,132,271,133,273,134,275,
135,277,136,279,137,281,138,283,139,285,140,287,141,289,142,291,143,293,
144,295,145,297,146,299,147,301,148,303,149,305,150,307,0,309,0,311,0,313,
0,315,0,317,0,319,0,321,0,323,0,325,0,327,0,329,0,331,0,333,0,335,0,337,
0,339,0,341,0,343,0,345,0,347,0,349,0,351,0,353,0,355,0,357,0,359,0,361,
0,363,0,5,0,1,2,3,4,35,3,0,10,10,13,13,8232,8233,1,0,48,57,2,0,48,57,95,
95,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,79,79,111,111,
2,0,48,55,95,95,2,0,66,66,98,98,1,0,48,49,2,0,48,49,95,95,5,0,46,57,61,61,
63,63,65,90,97,122,4,0,9,9,11,12,32,32,160,160,1,0,96,96,2,0,60,60,123,123,
7,0,35,35,43,59,61,61,63,63,65,90,95,95,97,122,1,0,34,34,1,0,39,39,8,0,58,
58,65,90,97,122,8304,8591,11264,12271,12289,55295,63744,64975,65008,65533,
2,0,45,46,95,95,3,0,183,183,768,879,8255,8256,2,0,34,34,92,92,2,0,39,39,
92,92,9,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,118,118,
12,0,10,10,13,13,34,34,39,39,48,57,92,92,98,98,102,102,110,110,114,114,116,
118,120,120,3,0,48,57,117,117,120,120,4,0,48,57,65,70,95,95,97,102,1,0,49,
57,2,0,69,69,101,101,2,0,43,43,45,45,408,0,48,57,95,95,768,879,1155,1159,
1425,1469,1471,1471,1473,1474,1476,1477,1479,1479,1552,1562,1611,1641,1648,
1648,1750,1756,1759,1764,1767,1768,1770,1773,1776,1785,1809,1809,1840,1866,
1958,1968,1984,1993,2027,2035,2045,2045,2070,2073,2075,2083,2085,2087,2089,
2093,2137,2139,2200,2207,2250,2273,2275,2306,2362,2362,2364,2364,2369,2376,
2381,2381,2385,2391,2402,2403,2406,2415,2433,2433,2492,2492,2497,2500,2509,
2509,2530,2531,2534,2543,2558,2558,2561,2562,2620,2620,2625,2626,2631,2632,
2635,2637,2641,2641,2662,2673,2677,2677,2689,2690,2748,2748,2753,2757,2759,
2760,2765,2765,2786,2787,2790,2799,2810,2815,2817,2817,2876,2876,2879,2879,
2881,2884,2893,2893,2901,2902,2914,2915,2918,2927,2946,2946,3008,3008,3021,
3021,3046,3055,3072,3072,3076,3076,3132,3132,3134,3136,3142,3144,3146,3149,
3157,3158,3170,3171,3174,3183,3201,3201,3260,3260,3263,3263,3270,3270,3276,
3277,3298,3299,3302,3311,3328,3329,3387,3388,3393,3396,3405,3405,3426,3427,
3430,3439,3457,3457,3530,3530,3538,3540,3542,3542,3558,3567,3633,3633,3636,
3642,3655,3662,3664,3673,3761,3761,3764,3772,3784,3790,3792,3801,3864,3865,
3872,3881,3893,3893,3895,3895,3897,3897,3953,3966,3968,3972,3974,3975,3981,
3991,3993,4028,4038,4038,4141,4144,4146,4151,4153,4154,4157,4158,4160,4169,
4184,4185,4190,4192,4209,4212,4226,4226,4229,4230,4237,4237,4240,4249,4253,
4253,4957,4959,5906,5908,5938,5939,5970,5971,6002,6003,6068,6069,6071,6077,
6086,6086,6089,6099,6109,6109,6112,6121,6155,6157,6159,6169,6277,6278,6313,
6313,6432,6434,6439,6440,6450,6450,6457,6459,6470,6479,6608,6617,6679,6680,
6683,6683,6742,6742,6744,6750,6752,6752,6754,6754,6757,6764,6771,6780,6783,
6793,6800,6809,6832,6845,6847,6862,6912,6915,6964,6964,6966,6970,6972,6972,
6978,6978,6992,7001,7019,7027,7040,7041,7074,7077,7080,7081,7083,7085,7088,
7097,7142,7142,7144,7145,7149,7149,7151,7153,7212,7219,7222,7223,7232,7241,
7248,7257,7376,7378,7380,7392,7394,7400,7405,7405,7412,7412,7416,7417,7616,
7679,8204,8205,8255,8256,8276,8276,8400,8412,8417,8417,8421,8432,11503,11505,
11647,11647,11744,11775,12330,12333,12441,12442,42528,42537,42607,42607,
42612,42621,42654,42655,42736,42737,43010,43010,43014,43014,43019,43019,
43045,43046,43052,43052,43204,43205,43216,43225,43232,43249,43263,43273,
43302,43309,43335,43345,43392,43394,43443,43443,43446,43449,43452,43453,
43472,43481,43493,43493,43504,43513,43561,43566,43569,43570,43573,43574,
43587,43587,43596,43596,43600,43609,43644,43644,43696,43696,43698,43700,
43703,43704,43710,43711,43713,43713,43756,43757,43766,43766,44005,44005,
44008,44008,44013,44013,44016,44025,64286,64286,65024,65039,65056,65071,
65075,65076,65101,65103,65296,65305,65343,65343,66045,66045,66272,66272,
66422,66426,66720,66729,68097,68099,68101,68102,68108,68111,68152,68154,
68159,68159,68325,68326,68900,68903,68912,68921,69291,69292,69373,69375,
69446,69456,69506,69509,69633,69633,69688,69702,69734,69744,69747,69748,
69759,69761,69811,69814,69817,69818,69826,69826,69872,69881,69888,69890,
69927,69931,69933,69940,69942,69951,70003,70003,70016,70017,70070,70078,
70089,70092,70095,70105,70191,70193,70196,70196,70198,70199,70206,70206,
70209,70209,70367,70367,70371,70378,70384,70393,70400,70401,70459,70460,
70464,70464,70502,70508,70512,70516,70712,70719,70722,70724,70726,70726,
70736,70745,70750,70750,70835,70840,70842,70842,70847,70848,70850,70851,
70864,70873,71090,71093,71100,71101,71103,71104,71132,71133,71219,71226,
71229,71229,71231,71232,71248,71257,71339,71339,71341,71341,71344,71349,
71351,71351,71360,71369,71453,71455,71458,71461,71463,71467,71472,71481,
71727,71735,71737,71738,71904,71913,71995,71996,71998,71998,72003,72003,
72016,72025,72148,72151,72154,72155,72160,72160,72193,72202,72243,72248,
72251,72254,72263,72263,72273,72278,72281,72283,72330,72342,72344,72345,
72752,72758,72760,72765,72767,72767,72784,72793,72850,72871,72874,72880,
72882,72883,72885,72886,73009,73014,73018,73018,73020,73021,73023,73029,
73031,73031,73040,73049,73104,73105,73109,73109,73111,73111,73120,73129,
73459,73460,73472,73473,73526,73530,73536,73536,73538,73538,73552,73561,
78912,78912,78919,78933,92768,92777,92864,92873,92912,92916,92976,92982,
93008,93017,94031,94031,94095,94098,94180,94180,113821,113822,118528,118573,
118576,118598,119143,119145,119163,119170,119173,119179,119210,119213,119362,
119364,120782,120831,121344,121398,121403,121452,121461,121461,121476,121476,
121499,121503,121505,121519,122880,122886,122888,122904,122907,122913,122915,
122916,122918,122922,123023,123023,123184,123190,123200,123209,123566,123566,
123628,123641,124140,124153,125136,125142,125252,125258,125264,125273,130032,
130041,917760,917999,661,0,36,36,65,90,95,95,97,122,170,170,181,181,186,
186,192,214,216,246,248,705,710,721,736,740,748,748,750,750,880,884,886,
887,890,893,895,895,902,902,904,906,908,908,910,929,931,1013,1015,1153,1162,
1327,1329,1366,1369,1369,1376,1416,1488,1514,1519,1522,1568,1610,1646,1647,
1649,1747,1749,1749,1765,1766,1774,1775,1786,1788,1791,1791,1808,1808,1810,
1839,1869,1957,1969,1969,1994,2026,2036,2037,2042,2042,2048,2069,2074,2074,
2084,2084,2088,2088,2112,2136,2144,2154,2160,2183,2185,2190,2208,2249,2308,
2361,2365,2365,2384,2384,2392,2401,2417,2432,2437,2444,2447,2448,2451,2472,
2474,2480,2482,2482,2486,2489,2493,2493,2510,2510,2524,2525,2527,2529,2544,
2545,2556,2556,2565,2570,2575,2576,2579,2600,2602,2608,2610,2611,2613,2614,
2616,2617,2649,2652,2654,2654,2674,2676,2693,2701,2703,2705,2707,2728,2730,
2736,2738,2739,2741,2745,2749,2749,2768,2768,2784,2785,2809,2809,2821,2828,
2831,2832,2835,2856,2858,2864,2866,2867,2869,2873,2877,2877,2908,2909,2911,
2913,2929,2929,2947,2947,2949,2954,2958,2960,2962,2965,2969,2970,2972,2972,
2974,2975,2979,2980,2984,2986,2990,3001,3024,3024,3077,3084,3086,3088,3090,
3112,3114,3129,3133,3133,3160,3162,3165,3165,3168,3169,3200,3200,3205,3212,
3214,3216,3218,3240,3242,3251,3253,3257,3261,3261,3293,3294,3296,3297,3313,
3314,3332,3340,3342,3344,3346,3386,3389,3389,3406,3406,3412,3414,3423,3425,
3450,3455,3461,3478,3482,3505,3507,3515,3517,3517,3520,3526,3585,3632,3634,
3635,3648,3654,3713,3714,3716,3716,3718,3722,3724,3747,3749,3749,3751,3760,
3762,3763,3773,3773,3776,3780,3782,3782,3804,3807,3840,3840,3904,3911,3913,
3948,3976,3980,4096,4138,4159,4159,4176,4181,4186,4189,4193,4193,4197,4198,
4206,4208,4213,4225,4238,4238,4256,4293,4295,4295,4301,4301,4304,4346,4348,
4680,4682,4685,4688,4694,4696,4696,4698,4701,4704,4744,4746,4749,4752,4784,
4786,4789,4792,4798,4800,4800,4802,4805,4808,4822,4824,4880,4882,4885,4888,
4954,4992,5007,5024,5109,5112,5117,5121,5740,5743,5759,5761,5786,5792,5866,
5873,5880,5888,5905,5919,5937,5952,5969,5984,5996,5998,6000,6016,6067,6103,
6103,6108,6108,6176,6264,6272,6276,6279,6312,6314,6314,6320,6389,6400,6430,
6480,6509,6512,6516,6528,6571,6576,6601,6656,6678,6688,6740,6823,6823,6917,
6963,6981,6988,7043,7072,7086,7087,7098,7141,7168,7203,7245,7247,7258,7293,
7296,7304,7312,7354,7357,7359,7401,7404,7406,7411,7413,7414,7418,7418,7424,
7615,7680,7957,7960,7965,7968,8005,8008,8013,8016,8023,8025,8025,8027,8027,
8029,8029,8031,8061,8064,8116,8118,8124,8126,8126,8130,8132,8134,8140,8144,
8147,8150,8155,8160,8172,8178,8180,8182,8188,8305,8305,8319,8319,8336,8348,
8450,8450,8455,8455,8458,8467,8469,8469,8473,8477,8484,8484,8486,8486,8488,
8488,8490,8493,8495,8505,8508,8511,8517,8521,8526,8526,8579,8580,11264,11492,
11499,11502,11506,11507,11520,11557,11559,11559,11565,11565,11568,11623,
11631,11631,11648,11670,11680,11686,11688,11694,11696,11702,11704,11710,
11712,11718,11720,11726,11728,11734,11736,11742,11823,11823,12293,12294,
12337,12341,12347,12348,12353,12438,12445,12447,12449,12538,12540,12543,
12549,12591,12593,12686,12704,12735,12784,12799,13312,19903,19968,42124,
42192,42237,42240,42508,42512,42527,42538,42539,42560,42606,42623,42653,
42656,42725,42775,42783,42786,42888,42891,42954,42960,42961,42963,42963,
42965,42969,42994,43009,43011,43013,43015,43018,43020,43042,43072,43123,
43138,43187,43250,43255,43259,43259,43261,43262,43274,43301,43312,43334,
43360,43388,43396,43442,43471,43471,43488,43492,43494,43503,43514,43518,
43520,43560,43584,43586,43588,43595,43616,43638,43642,43642,43646,43695,
43697,43697,43701,43702,43705,43709,43712,43712,43714,43714,43739,43741,
43744,43754,43762,43764,43777,43782,43785,43790,43793,43798,43808,43814,
43816,43822,43824,43866,43868,43881,43888,44002,44032,55203,55216,55238,
55243,55291,63744,64109,64112,64217,64256,64262,64275,64279,64285,64285,
64287,64296,64298,64310,64312,64316,64318,64318,64320,64321,64323,64324,
64326,64433,64467,64829,64848,64911,64914,64967,65008,65019,65136,65140,
65142,65276,65313,65338,65345,65370,65382,65470,65474,65479,65482,65487,
65490,65495,65498,65500,65536,65547,65549,65574,65576,65594,65596,65597,
65599,65613,65616,65629,65664,65786,66176,66204,66208,66256,66304,66335,
66349,66368,66370,66377,66384,66421,66432,66461,66464,66499,66504,66511,
66560,66717,66736,66771,66776,66811,66816,66855,66864,66915,66928,66938,
66940,66954,66956,66962,66964,66965,66967,66977,66979,66993,66995,67001,
67003,67004,67072,67382,67392,67413,67424,67431,67456,67461,67463,67504,
67506,67514,67584,67589,67592,67592,67594,67637,67639,67640,67644,67644,
67647,67669,67680,67702,67712,67742,67808,67826,67828,67829,67840,67861,
67872,67897,67968,68023,68030,68031,68096,68096,68112,68115,68117,68119,
68121,68149,68192,68220,68224,68252,68288,68295,68297,68324,68352,68405,
68416,68437,68448,68466,68480,68497,68608,68680,68736,68786,68800,68850,
68864,68899,69248,69289,69296,69297,69376,69404,69415,69415,69424,69445,
69488,69505,69552,69572,69600,69622,69635,69687,69745,69746,69749,69749,
69763,69807,69840,69864,69891,69926,69956,69956,69959,69959,69968,70002,
70006,70006,70019,70066,70081,70084,70106,70106,70108,70108,70144,70161,
70163,70187,70207,70208,70272,70278,70280,70280,70282,70285,70287,70301,
70303,70312,70320,70366,70405,70412,70415,70416,70419,70440,70442,70448,
70450,70451,70453,70457,70461,70461,70480,70480,70493,70497,70656,70708,
70727,70730,70751,70753,70784,70831,70852,70853,70855,70855,71040,71086,
71128,71131,71168,71215,71236,71236,71296,71338,71352,71352,71424,71450,
71488,71494,71680,71723,71840,71903,71935,71942,71945,71945,71948,71955,
71957,71958,71960,71983,71999,71999,72001,72001,72096,72103,72106,72144,
72161,72161,72163,72163,72192,72192,72203,72242,72250,72250,72272,72272,
72284,72329,72349,72349,72368,72440,72704,72712,72714,72750,72768,72768,
72818,72847,72960,72966,72968,72969,72971,73008,73030,73030,73056,73061,
73063,73064,73066,73097,73112,73112,73440,73458,73474,73474,73476,73488,
73490,73523,73648,73648,73728,74649,74880,75075,77712,77808,77824,78895,
78913,78918,82944,83526,92160,92728,92736,92766,92784,92862,92880,92909,
92928,92975,92992,92995,93027,93047,93053,93071,93760,93823,93952,94026,
94032,94032,94099,94111,94176,94177,94179,94179,94208,100343,100352,101589,
101632,101640,110576,110579,110581,110587,110589,110590,110592,110882,110898,
110898,110928,110930,110933,110933,110948,110951,110960,111355,113664,113770,
113776,113788,113792,113800,113808,113817,119808,119892,119894,119964,119966,
119967,119970,119970,119973,119974,119977,119980,119982,119993,119995,119995,
119997,120003,120005,120069,120071,120074,120077,120084,120086,120092,120094,
120121,120123,120126,120128,120132,120134,120134,120138,120144,120146,120485,
120488,120512,120514,120538,120540,120570,120572,120596,120598,120628,120630,
120654,120656,120686,120688,120712,120714,120744,120746,120770,120772,120779,
122624,122654,122661,122666,122928,122989,123136,123180,123191,123197,123214,
123214,123536,123565,123584,123627,124112,124139,124896,124902,124904,124907,
124909,124910,124912,124926,124928,125124,125184,125251,125259,125259,126464,
126467,126469,126495,126497,126498,126500,126500,126503,126503,126505,126514,
126516,126519,126521,126521,126523,126523,126530,126530,126535,126535,126537,
126537,126539,126539,126541,126543,126545,126546,126548,126548,126551,126551,
126553,126553,126555,126555,126557,126557,126559,126559,126561,126562,126564,
126564,126567,126570,126572,126578,126580,126583,126585,126588,126590,126590,
126592,126601,126603,126619,126625,126627,126629,126633,126635,126651,131072,
173791,173824,177977,177984,178205,178208,183969,183984,191456,194560,195101,
196608,201546,201552,205743,6,0,10,10,13,13,42,42,47,47,91,92,8232,8233,
5,0,10,10,13,13,47,47,91,92,8232,8233,4,0,10,10,13,13,92,93,8232,8233,1514,
0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,
0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,
0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,
157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,
1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,
0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,
0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,
0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,1,0,0,0,
0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,0,217,1,0,0,0,0,
219,1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,229,
1,0,0,0,0,231,1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,0,237,1,0,0,0,0,239,1,
0,0,0,0,241,1,0,0,0,0,243,1,0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,0,249,1,0,
0,0,0,251,1,0,0,0,0,253,1,0,0,0,0,255,1,0,0,0,0,257,1,0,0,0,0,259,1,0,0,
0,0,261,1,0,0,0,1,263,1,0,0,0,1,265,1,0,0,0,1,267,1,0,0,0,2,269,1,0,0,0,
2,271,1,0,0,0,2,273,1,0,0,0,2,275,1,0,0,0,2,277,1,0,0,0,2,279,1,0,0,0,2,
281,1,0,0,0,2,283,1,0,0,0,2,285,1,0,0,0,2,287,1,0,0,0,2,289,1,0,0,0,3,291,
1,0,0,0,3,293,1,0,0,0,3,295,1,0,0,0,3,297,1,0,0,0,4,299,1,0,0,0,4,301,1,
0,0,0,4,303,1,0,0,0,4,305,1,0,0,0,5,365,1,0,0,0,7,375,1,0,0,0,9,380,1,0,
0,0,11,382,1,0,0,0,13,384,1,0,0,0,15,386,1,0,0,0,17,388,1,0,0,0,19,393,1,
0,0,0,21,398,1,0,0,0,23,400,1,0,0,0,25,402,1,0,0,0,27,404,1,0,0,0,29,406,
1,0,0,0,31,408,1,0,0,0,33,412,1,0,0,0,35,414,1,0,0,0,37,417,1,0,0,0,39,420,
1,0,0,0,41,422,1,0,0,0,43,424,1,0,0,0,45,426,1,0,0,0,47,428,1,0,0,0,49,430,
1,0,0,0,51,432,1,0,0,0,53,434,1,0,0,0,55,437,1,0,0,0,57,440,1,0,0,0,59,442,
1,0,0,0,61,445,1,0,0,0,63,448,1,0,0,0,65,452,1,0,0,0,67,454,1,0,0,0,69,456,
1,0,0,0,71,459,1,0,0,0,73,462,1,0,0,0,75,465,1,0,0,0,77,468,1,0,0,0,79,472,
1,0,0,0,81,476,1,0,0,0,83,478,1,0,0,0,85,480,1,0,0,0,87,482,1,0,0,0,89,485,
1,0,0,0,91,488,1,0,0,0,93,491,1,0,0,0,95,494,1,0,0,0,97,497,1,0,0,0,99,500,
1,0,0,0,101,503,1,0,0,0,103,507,1,0,0,0,105,511,1,0,0,0,107,516,1,0,0,0,
109,519,1,0,0,0,111,522,1,0,0,0,113,525,1,0,0,0,115,529,1,0,0,0,117,532,
1,0,0,0,119,546,1,0,0,0,121,575,1,0,0,0,123,577,1,0,0,0,125,586,1,0,0,0,
127,594,1,0,0,0,129,603,1,0,0,0,131,612,1,0,0,0,133,623,1,0,0,0,135,634,
1,0,0,0,137,645,1,0,0,0,139,648,1,0,0,0,141,654,1,0,0,0,143,657,1,0,0,0,
145,668,1,0,0,0,147,675,1,0,0,0,149,680,1,0,0,0,151,685,1,0,0,0,153,689,
1,0,0,0,155,693,1,0,0,0,157,699,1,0,0,0,159,707,1,0,0,0,161,714,1,0,0,0,
163,719,1,0,0,0,165,728,1,0,0,0,167,732,1,0,0,0,169,739,1,0,0,0,171,745,
1,0,0,0,173,754,1,0,0,0,175,763,1,0,0,0,177,768,1,0,0,0,179,773,1,0,0,0,
181,781,1,0,0,0,183,784,1,0,0,0,185,790,1,0,0,0,187,797,1,0,0,0,189,800,
1,0,0,0,191,804,1,0,0,0,193,807,1,0,0,0,195,812,1,0,0,0,197,819,1,0,0,0,
199,825,1,0,0,0,201,830,1,0,0,0,203,838,1,0,0,0,205,844,1,0,0,0,207,850,
1,0,0,0,209,857,1,0,0,0,211,864,1,0,0,0,213,870,1,0,0,0,215,876,1,0,0,0,
217,889,1,0,0,0,219,895,1,0,0,0,221,901,1,0,0,0,223,911,1,0,0,0,225,920,
1,0,0,0,227,932,1,0,0,0,229,942,1,0,0,0,231,954,1,0,0,0,233,963,1,0,0,0,
235,971,1,0,0,0,237,994,1,0,0,0,239,1013,1,0,0,0,241,1024,1,0,0,0,243,1030,
1,0,0,0,245,1036,1,0,0,0,247,1040,1,0,0,0,249,1056,1,0,0,0,251,1070,1,0,
0,0,253,1081,1,0,0,0,255,1097,1,0,0,0,257,1114,1,0,0,0,259,1136,1,0,0,0,
261,1140,1,0,0,0,263,1162,1,0,0,0,265,1168,1,0,0,0,267,1173,1,0,0,0,269,
1175,1,0,0,0,271,1179,1,0,0,0,273,1184,1,0,0,0,275,1189,1,0,0,0,277,1191,
1,0,0,0,279,1196,1,0,0,0,281,1204,1,0,0,0,283,1210,1,0,0,0,285,1214,1,0,
0,0,287,1228,1,0,0,0,289,1244,1,0,0,0,291,1247,1,0,0,0,293,1251,1,0,0,0,
295,1255,1,0,0,0,297,1261,1,0,0,0,299,1266,1,0,0,0,301,1270,1,0,0,0,303,
1277,1,0,0,0,305,1282,1,0,0,0,307,1289,1,0,0,0,309,1292,1,0,0,0,311,1299,
1,0,0,0,313,1306,1,0,0,0,315,1313,1,0,0,0,317,1322,1,0,0,0,319,1332,1,0,
0,0,321,1338,1,0,0,0,323,1340,1,0,0,0,325,1346,1,0,0,0,327,1352,1,0,0,0,
329,1359,1,0,0,0,331,1363,1,0,0,0,333,1365,1,0,0,0,335,1385,1,0,0,0,337,
1387,1,0,0,0,339,1396,1,0,0,0,341,1398,1,0,0,0,343,1402,1,0,0,0,345,1404,
1,0,0,0,347,1407,1,0,0,0,349,1417,1,0,0,0,351,1419,1,0,0,0,353,1430,1,0,
0,0,355,1435,1,0,0,0,357,1447,1,0,0,0,359,1459,1,0,0,0,361,1463,1,0,0,0,
363,1465,1,0,0,0,365,366,4,0,0,0,366,367,5,35,0,0,367,368,5,33,0,0,368,372,
1,0,0,0,369,371,8,0,0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,
372,373,1,0,0,0,373,6,1,0,0,0,374,372,1,0,0,0,375,376,5,60,0,0,376,377,4,
1,1,0,377,378,1,0,0,0,378,379,6,1,0,0,379,8,1,0,0,0,380,381,5,91,0,0,381,
10,1,0,0,0,382,383,5,93,0,0,383,12,1,0,0,0,384,385,5,40,0,0,385,14,1,0,0,
0,386,387,5,41,0,0,387,16,1,0,0,0,388,389,5,123,0,0,389,390,6,6,1,0,390,
391,1,0,0,0,391,392,6,6,2,0,392,18,1,0,0,0,393,394,5,125,0,0,394,395,6,7,
3,0,395,396,1,0,0,0,396,397,6,7,4,0,397,20,1,0,0,0,398,399,5,59,0,0,399,
22,1,0,0,0,400,401,5,44,0,0,401,24,1,0,0,0,402,403,5,61,0,0,403,26,1,0,0,
0,404,405,5,63,0,0,405,28,1,0,0,0,406,407,5,58,0,0,407,30,1,0,0,0,408,409,
5,46,0,0,409,410,5,46,0,0,410,411,5,46,0,0,411,32,1,0,0,0,412,413,5,46,0,
0,413,34,1,0,0,0,414,415,5,43,0,0,415,416,5,43,0,0,416,36,1,0,0,0,417,418,
5,45,0,0,418,419,5,45,0,0,419,38,1,0,0,0,420,421,5,43,0,0,421,40,1,0,0,0,
422,423,5,45,0,0,423,42,1,0,0,0,424,425,5,126,0,0,425,44,1,0,0,0,426,427,
5,33,0,0,427,46,1,0,0,0,428,429,5,42,0,0,429,48,1,0,0,0,430,431,5,47,0,0,
431,50,1,0,0,0,432,433,5,37,0,0,433,52,1,0,0,0,434,435,5,42,0,0,435,436,
5,42,0,0,436,54,1,0,0,0,437,438,5,63,0,0,438,439,5,63,0,0,439,56,1,0,0,0,
440,441,5,35,0,0,441,58,1,0,0,0,442,443,5,62,0,0,443,444,5,62,0,0,444,60,
1,0,0,0,445,446,5,60,0,0,446,447,5,60,0,0,447,62,1,0,0,0,448,449,5,62,0,
0,449,450,5,62,0,0,450,451,5,62,0,0,451,64,1,0,0,0,452,453,5,60,0,0,453,
66,1,0,0,0,454,455,5,62,0,0,455,68,1,0,0,0,456,457,5,60,0,0,457,458,5,61,
0,0,458,70,1,0,0,0,459,460,5,62,0,0,460,461,5,61,0,0,461,72,1,0,0,0,462,
463,5,61,0,0,463,464,5,61,0,0,464,74,1,0,0,0,465,466,5,33,0,0,466,467,5,
61,0,0,467,76,1,0,0,0,468,469,5,61,0,0,469,470,5,61,0,0,470,471,5,61,0,0,
471,78,1,0,0,0,472,473,5,33,0,0,473,474,5,61,0,0,474,475,5,61,0,0,475,80,
1,0,0,0,476,477,5,38,0,0,477,82,1,0,0,0,478,479,5,94,0,0,479,84,1,0,0,0,
480,481,5,124,0,0,481,86,1,0,0,0,482,483,5,38,0,0,483,484,5,38,0,0,484,88,
1,0,0,0,485,486,5,124,0,0,486,487,5,124,0,0,487,90,1,0,0,0,488,489,5,42,
0,0,489,490,5,61,0,0,490,92,1,0,0,0,491,492,5,47,0,0,492,493,5,61,0,0,493,
94,1,0,0,0,494,495,5,37,0,0,495,496,5,61,0,0,496,96,1,0,0,0,497,498,5,43,
0,0,498,499,5,61,0,0,499,98,1,0,0,0,500,501,5,45,0,0,501,502,5,61,0,0,502,
100,1,0,0,0,503,504,5,60,0,0,504,505,5,60,0,0,505,506,5,61,0,0,506,102,1,
0,0,0,507,508,5,62,0,0,508,509,5,62,0,0,509,510,5,61,0,0,510,104,1,0,0,0,
511,512,5,62,0,0,512,513,5,62,0,0,513,514,5,62,0,0,514,515,5,61,0,0,515,
106,1,0,0,0,516,517,5,38,0,0,517,518,5,61,0,0,518,108,1,0,0,0,519,520,5,
94,0,0,520,521,5,61,0,0,521,110,1,0,0,0,522,523,5,124,0,0,523,524,5,61,0,
0,524,112,1,0,0,0,525,526,5,42,0,0,526,527,5,42,0,0,527,528,5,61,0,0,528,
114,1,0,0,0,529,530,5,61,0,0,530,531,5,62,0,0,531,116,1,0,0,0,532,533,5,
110,0,0,533,534,5,117,0,0,534,535,5,108,0,0,535,536,5,108,0,0,536,118,1,
0,0,0,537,538,5,116,0,0,538,539,5,114,0,0,539,540,5,117,0,0,540,547,5,101,
0,0,541,542,5,102,0,0,542,543,5,97,0,0,543,544,5,108,0,0,544,545,5,115,0,
0,545,547,5,101,0,0,546,537,1,0,0,0,546,541,1,0,0,0,547,120,1,0,0,0,548,
549,3,349,172,0,549,550,5,46,0,0,550,554,7,1,0,0,551,553,7,2,0,0,552,551,
1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,558,1,0,0,0,
556,554,1,0,0,0,557,559,3,351,173,0,558,557,1,0,0,0,558,559,1,0,0,0,559,
576,1,0,0,0,560,561,5,46,0,0,561,565,7,1,0,0,562,564,7,2,0,0,563,562,1,0,
0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,569,1,0,0,0,567,
565,1,0,0,0,568,570,3,351,173,0,569,568,1,0,0,0,569,570,1,0,0,0,570,576,
1,0,0,0,571,573,3,349,172,0,572,574,3,351,173,0,573,572,1,0,0,0,573,574,
1,0,0,0,574,576,1,0,0,0,575,548,1,0,0,0,575,560,1,0,0,0,575,571,1,0,0,0,
576,122,1,0,0,0,577,578,5,48,0,0,578,579,7,3,0,0,579,583,7,4,0,0,580,582,
3,347,171,0,581,580,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,
0,0,584,124,1,0,0,0,585,583,1,0,0,0,586,588,5,48,0,0,587,589,7,5,0,0,588,
587,1,0,0,0,589,590,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,592,1,0,
0,0,592,593,4,60,2,0,593,126,1,0,0,0,594,595,5,48,0,0,595,596,7,6,0,0,596,
600,7,5,0,0,597,599,7,7,0,0,598,597,1,0,0,0,599,602,1,0,0,0,600,598,1,0,
0,0,600,601,1,0,0,0,601,128,1,0,0,0,602,600,1,0,0,0,603,604,5,48,0,0,604,
605,7,8,0,0,605,609,7,9,0,0,606,608,7,10,0,0,607,606,1,0,0,0,608,611,1,0,
0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,130,1,0,0,0,611,609,1,0,0,0,612,
613,5,48,0,0,613,614,7,3,0,0,614,618,7,4,0,0,615,617,3,347,171,0,616,615,
1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,
620,618,1,0,0,0,621,622,5,110,0,0,622,132,1,0,0,0,623,624,5,48,0,0,624,625,
7,6,0,0,625,629,7,5,0,0,626,628,7,7,0,0,627,626,1,0,0,0,628,631,1,0,0,0,
629,627,1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,629,1,0,0,0,632,633,
5,110,0,0,633,134,1,0,0,0,634,635,5,48,0,0,635,636,7,8,0,0,636,640,7,9,0,
0,637,639,7,10,0,0,638,637,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,641,
1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,644,5,110,0,0,644,136,1,0,0,
0,645,646,3,349,172,0,646,647,5,110,0,0,647,138,1,0,0,0,648,649,5,98,0,0,
649,650,5,114,0,0,650,651,5,101,0,0,651,652,5,97,0,0,652,653,5,107,0,0,653,
140,1,0,0,0,654,655,5,100,0,0,655,656,5,111,0,0,656,142,1,0,0,0,657,658,
5,105,0,0,658,659,5,110,0,0,659,660,5,115,0,0,660,661,5,116,0,0,661,662,
5,97,0,0,662,663,5,110,0,0,663,664,5,99,0,0,664,665,5,101,0,0,665,666,5,
111,0,0,666,667,5,102,0,0,667,144,1,0,0,0,668,669,5,116,0,0,669,670,5,121,
0,0,670,671,5,112,0,0,671,672,5,101,0,0,672,673,5,111,0,0,673,674,5,102,
0,0,674,146,1,0,0,0,675,676,5,99,0,0,676,677,5,97,0,0,677,678,5,115,0,0,
678,679,5,101,0,0,679,148,1,0,0,0,680,681,5,101,0,0,681,682,5,108,0,0,682,
683,5,115,0,0,683,684,5,101,0,0,684,150,1,0,0,0,685,686,5,110,0,0,686,687,
5,101,0,0,687,688,5,119,0,0,688,152,1,0,0,0,689,690,5,118,0,0,690,691,5,
97,0,0,691,692,5,114,0,0,692,154,1,0,0,0,693,694,5,99,0,0,694,695,5,97,0,
0,695,696,5,116,0,0,696,697,5,99,0,0,697,698,5,104,0,0,698,156,1,0,0,0,699,
700,5,102,0,0,700,701,5,105,0,0,701,702,5,110,0,0,702,703,5,97,0,0,703,704,
5,108,0,0,704,705,5,108,0,0,705,706,5,121,0,0,706,158,1,0,0,0,707,708,5,
114,0,0,708,709,5,101,0,0,709,710,5,116,0,0,710,711,5,117,0,0,711,712,5,
114,0,0,712,713,5,110,0,0,713,160,1,0,0,0,714,715,5,118,0,0,715,716,5,111,
0,0,716,717,5,105,0,0,717,718,5,100,0,0,718,162,1,0,0,0,719,720,5,99,0,0,
720,721,5,111,0,0,721,722,5,110,0,0,722,723,5,116,0,0,723,724,5,105,0,0,
724,725,5,110,0,0,725,726,5,117,0,0,726,727,5,101,0,0,727,164,1,0,0,0,728,
729,5,102,0,0,729,730,5,111,0,0,730,731,5,114,0,0,731,166,1,0,0,0,732,733,
5,115,0,0,733,734,5,119,0,0,734,735,5,105,0,0,735,736,5,116,0,0,736,737,
5,99,0,0,737,738,5,104,0,0,738,168,1,0,0,0,739,740,5,119,0,0,740,741,5,104,
0,0,741,742,5,105,0,0,742,743,5,108,0,0,743,744,5,101,0,0,744,170,1,0,0,
0,745,746,5,100,0,0,746,747,5,101,0,0,747,748,5,98,0,0,748,749,5,117,0,0,
749,750,5,103,0,0,750,751,5,103,0,0,751,752,5,101,0,0,752,753,5,114,0,0,
753,172,1,0,0,0,754,755,5,102,0,0,755,756,5,117,0,0,756,757,5,110,0,0,757,
758,5,99,0,0,758,759,5,116,0,0,759,760,5,105,0,0,760,761,5,111,0,0,761,762,
5,110,0,0,762,174,1,0,0,0,763,764,5,116,0,0,764,765,5,104,0,0,765,766,5,
105,0,0,766,767,5,115,0,0,767,176,1,0,0,0,768,769,5,119,0,0,769,770,5,105,
0,0,770,771,5,116,0,0,771,772,5,104,0,0,772,178,1,0,0,0,773,774,5,100,0,
0,774,775,5,101,0,0,775,776,5,102,0,0,776,777,5,97,0,0,777,778,5,117,0,0,
778,779,5,108,0,0,779,780,5,116,0,0,780,180,1,0,0,0,781,782,5,105,0,0,782,
783,5,102,0,0,783,182,1,0,0,0,784,785,5,116,0,0,785,786,5,104,0,0,786,787,
5,114,0,0,787,788,5,111,0,0,788,789,5,119,0,0,789,184,1,0,0,0,790,791,5,
100,0,0,791,792,5,101,0,0,792,793,5,108,0,0,793,794,5,101,0,0,794,795,5,
116,0,0,795,796,5,101,0,0,796,186,1,0,0,0,797,798,5,105,0,0,798,799,5,110,
0,0,799,188,1,0,0,0,800,801,5,116,0,0,801,802,5,114,0,0,802,803,5,121,0,
0,803,190,1,0,0,0,804,805,5,97,0,0,805,806,5,115,0,0,806,192,1,0,0,0,807,
808,5,102,0,0,808,809,5,114,0,0,809,810,5,111,0,0,810,811,5,109,0,0,811,
194,1,0,0,0,812,813,5,121,0,0,813,814,5,105,0,0,814,815,5,101,0,0,815,816,
5,108,0,0,816,817,5,100,0,0,817,818,5,42,0,0,818,196,1,0,0,0,819,820,5,99,
0,0,820,821,5,108,0,0,821,822,5,97,0,0,822,823,5,115,0,0,823,824,5,115,0,
0,824,198,1,0,0,0,825,826,5,101,0,0,826,827,5,110,0,0,827,828,5,117,0,0,
828,829,5,109,0,0,829,200,1,0,0,0,830,831,5,101,0,0,831,832,5,120,0,0,832,
833,5,116,0,0,833,834,5,101,0,0,834,835,5,110,0,0,835,836,5,100,0,0,836,
837,5,115,0,0,837,202,1,0,0,0,838,839,5,115,0,0,839,840,5,117,0,0,840,841,
5,112,0,0,841,842,5,101,0,0,842,843,5,114,0,0,843,204,1,0,0,0,844,845,5,
99,0,0,845,846,5,111,0,0,846,847,5,110,0,0,847,848,5,115,0,0,848,849,5,116,
0,0,849,206,1,0,0,0,850,851,5,101,0,0,851,852,5,120,0,0,852,853,5,112,0,
0,853,854,5,111,0,0,854,855,5,114,0,0,855,856,5,116,0,0,856,208,1,0,0,0,
857,858,5,105,0,0,858,859,5,109,0,0,859,860,5,112,0,0,860,861,5,111,0,0,
861,862,5,114,0,0,862,863,5,116,0,0,863,210,1,0,0,0,864,865,5,97,0,0,865,
866,5,115,0,0,866,867,5,121,0,0,867,868,5,110,0,0,868,869,5,99,0,0,869,212,
1,0,0,0,870,871,5,97,0,0,871,872,5,119,0,0,872,873,5,97,0,0,873,874,5,105,
0,0,874,875,5,116,0,0,875,214,1,0,0,0,876,877,5,105,0,0,877,878,5,109,0,
0,878,879,5,112,0,0,879,880,5,108,0,0,880,881,5,101,0,0,881,882,5,109,0,
0,882,883,5,101,0,0,883,884,5,110,0,0,884,885,5,116,0,0,885,886,5,115,0,
0,886,887,1,0,0,0,887,888,4,105,3,0,888,216,1,0,0,0,889,890,5,108,0,0,890,
891,5,101,0,0,891,892,5,116,0,0,892,893,1,0,0,0,893,894,4,106,4,0,894,218,
1,0,0,0,895,896,5,108,0,0,896,897,5,101,0,0,897,898,5,116,0,0,898,899,1,
0,0,0,899,900,4,107,5,0,900,220,1,0,0,0,901,902,5,112,0,0,902,903,5,114,
0,0,903,904,5,105,0,0,904,905,5,118,0,0,905,906,5,97,0,0,906,907,5,116,0,
0,907,908,5,101,0,0,908,909,1,0,0,0,909,910,4,108,6,0,910,222,1,0,0,0,911,
912,5,112,0,0,912,913,5,117,0,0,913,914,5,98,0,0,914,915,5,108,0,0,915,916,
5,105,0,0,916,917,5,99,0,0,917,918,1,0,0,0,918,919,4,109,7,0,919,224,1,0,
0,0,920,921,5,105,0,0,921,922,5,110,0,0,922,923,5,116,0,0,923,924,5,101,
0,0,924,925,5,114,0,0,925,926,5,102,0,0,926,927,5,97,0,0,927,928,5,99,0,
0,928,929,5,101,0,0,929,930,1,0,0,0,930,931,4,110,8,0,931,226,1,0,0,0,932,
933,5,112,0,0,933,934,5,97,0,0,934,935,5,99,0,0,935,936,5,107,0,0,936,937,
5,97,0,0,937,938,5,103,0,0,938,939,5,101,0,0,939,940,1,0,0,0,940,941,4,111,
9,0,941,228,1,0,0,0,942,943,5,112,0,0,943,944,5,114,0,0,944,945,5,111,0,
0,945,946,5,116,0,0,946,947,5,101,0,0,947,948,5,99,0,0,948,949,5,116,0,0,
949,950,5,101,0,0,950,951,5,100,0,0,951,952,1,0,0,0,952,953,4,112,10,0,953,
230,1,0,0,0,954,955,5,115,0,0,955,956,5,116,0,0,956,957,5,97,0,0,957,958,
5,116,0,0,958,959,5,105,0,0,959,960,5,99,0,0,960,961,1,0,0,0,961,962,4,113,
11,0,962,232,1,0,0,0,963,964,5,121,0,0,964,965,5,105,0,0,965,966,5,101,0,
0,966,967,5,108,0,0,967,968,5,100,0,0,968,969,1,0,0,0,969,970,4,114,12,0,
970,234,1,0,0,0,971,975,3,355,175,0,972,974,3,353,174,0,973,972,1,0,0,0,
974,977,1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,236,1,0,0,0,977,975,
1,0,0,0,978,982,5,34,0,0,979,981,3,325,160,0,980,979,1,0,0,0,981,984,1,0,
0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,0,984,982,1,0,0,0,985,
995,5,34,0,0,986,990,5,39,0,0,987,989,3,327,161,0,988,987,1,0,0,0,989,992,
1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,993,1,0,0,0,992,990,1,0,0,0,
993,995,5,39,0,0,994,978,1,0,0,0,994,986,1,0,0,0,995,996,1,0,0,0,996,997,
6,116,5,0,997,238,1,0,0,0,998,999,5,104,0,0,999,1000,5,116,0,0,1000,1001,
5,116,0,0,1001,1002,5,112,0,0,1002,1004,1,0,0,0,1003,1005,5,115,0,0,1004,
1003,1,0,0,0,1004,1005,1,0,0,0,1005,1014,1,0,0,0,1006,1007,5,102,0,0,1007,
1008,5,116,0,0,1008,1014,5,112,0,0,1009,1010,5,102,0,0,1010,1011,5,105,0,
0,1011,1012,5,108,0,0,1012,1014,5,101,0,0,1013,998,1,0,0,0,1013,1006,1,0,
0,0,1013,1009,1,0,0,0,1014,1015,1,0,0,0,1015,1016,5,58,0,0,1016,1017,5,47,
0,0,1017,1018,5,47,0,0,1018,1020,1,0,0,0,1019,1021,7,11,0,0,1020,1019,1,
0,0,0,1021,1022,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,240,1,0,
0,0,1024,1025,5,96,0,0,1025,1026,6,118,6,0,1026,1027,1,0,0,0,1027,1028,6,
118,7,0,1028,242,1,0,0,0,1029,1031,7,12,0,0,1030,1029,1,0,0,0,1031,1032,
1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,
6,119,8,0,1035,244,1,0,0,0,1036,1037,7,0,0,0,1037,1038,1,0,0,0,1038,1039,
6,120,8,0,1039,246,1,0,0,0,1040,1041,5,123,0,0,1041,1042,5,47,0,0,1042,1043,
5,42,0,0,1043,1047,1,0,0,0,1044,1046,9,0,0,0,1045,1044,1,0,0,0,1046,1049,
1,0,0,0,1047,1048,1,0,0,0,1047,1045,1,0,0,0,1048,1050,1,0,0,0,1049,1047,
1,0,0,0,1050,1051,5,42,0,0,1051,1052,5,47,0,0,1052,1053,5,125,0,0,1053,1054,
1,0,0,0,1054,1055,6,121,8,0,1055,248,1,0,0,0,1056,1057,5,47,0,0,1057,1058,
5,42,0,0,1058,1062,1,0,0,0,1059,1061,9,0,0,0,1060,1059,1,0,0,0,1061,1064,
1,0,0,0,1062,1063,1,0,0,0,1062,1060,1,0,0,0,1063,1065,1,0,0,0,1064,1062,
1,0,0,0,1065,1066,5,42,0,0,1066,1067,5,47,0,0,1067,1068,1,0,0,0,1068,1069,
6,122,8,0,1069,250,1,0,0,0,1070,1071,5,47,0,0,1071,1072,5,47,0,0,1072,1076,
1,0,0,0,1073,1075,8,0,0,0,1074,1073,1,0,0,0,1075,1078,1,0,0,0,1076,1074,
1,0,0,0,1076,1077,1,0,0,0,1077,1079,1,0,0,0,1078,1076,1,0,0,0,1079,1080,
6,123,8,0,1080,252,1,0,0,0,1081,1082,5,47,0,0,1082,1086,3,357,176,0,1083,
1085,3,359,177,0,1084,1083,1,0,0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,
1087,1,0,0,0,1087,1089,1,0,0,0,1088,1086,1,0,0,0,1089,1090,4,124,13,0,1090,
1094,5,47,0,0,1091,1093,3,353,174,0,1092,1091,1,0,0,0,1093,1096,1,0,0,0,
1094,1092,1,0,0,0,1094,1095,1,0,0,0,1095,254,1,0,0,0,1096,1094,1,0,0,0,1097,
1098,5,60,0,0,1098,1099,5,33,0,0,1099,1100,5,45,0,0,1100,1101,5,45,0,0,1101,
1105,1,0,0,0,1102,1104,9,0,0,0,1103,1102,1,0,0,0,1104,1107,1,0,0,0,1105,
1106,1,0,0,0,1105,1103,1,0,0,0,1106,1108,1,0,0,0,1107,1105,1,0,0,0,1108,
1109,5,45,0,0,1109,1110,5,45,0,0,1110,1111,5,62,0,0,1111,1112,1,0,0,0,1112,
1113,6,125,8,0,1113,256,1,0,0,0,1114,1115,5,60,0,0,1115,1116,5,33,0,0,1116,
1117,5,91,0,0,1117,1118,5,67,0,0,1118,1119,5,68,0,0,1119,1120,5,65,0,0,1120,
1121,5,84,0,0,1121,1122,5,65,0,0,1122,1123,5,91,0,0,1123,1127,1,0,0,0,1124,
1126,9,0,0,0,1125,1124,1,0,0,0,1126,1129,1,0,0,0,1127,1128,1,0,0,0,1127,
1125,1,0,0,0,1128,1130,1,0,0,0,1129,1127,1,0,0,0,1130,1131,5,93,0,0,1131,
1132,5,93,0,0,1132,1133,5,62,0,0,1133,1134,1,0,0,0,1134,1135,6,126,8,0,1135,
258,1,0,0,0,1136,1137,9,0,0,0,1137,1138,1,0,0,0,1138,1139,6,127,9,0,1139,
260,1,0,0,0,1140,1141,5,60,0,0,1141,1142,5,33,0,0,1142,1143,5,91,0,0,1143,
1144,5,67,0,0,1144,1145,5,68,0,0,1145,1146,5,65,0,0,1146,1147,5,84,0,0,1147,
1148,5,65,0,0,1148,1149,5,91,0,0,1149,1153,1,0,0,0,1150,1152,9,0,0,0,1151,
1150,1,0,0,0,1152,1155,1,0,0,0,1153,1154,1,0,0,0,1153,1151,1,0,0,0,1154,
1156,1,0,0,0,1155,1153,1,0,0,0,1156,1157,5,93,0,0,1157,1158,5,93,0,0,1158,
1159,5,62,0,0,1159,1160,1,0,0,0,1160,1161,6,128,8,0,1161,262,1,0,0,0,1162,
1163,5,96,0,0,1163,1164,6,129,10,0,1164,1165,1,0,0,0,1165,1166,6,129,11,
0,1166,1167,6,129,4,0,1167,264,1,0,0,0,1168,1169,5,36,0,0,1169,1170,5,123,
0,0,1170,1171,1,0,0,0,1171,1172,6,130,2,0,1172,266,1,0,0,0,1173,1174,8,13,
0,0,1174,268,1,0,0,0,1175,1176,5,60,0,0,1176,1177,1,0,0,0,1177,1178,6,132,
0,0,1178,270,1,0,0,0,1179,1180,5,62,0,0,1180,1181,1,0,0,0,1181,1182,6,133,
4,0,1182,1183,6,133,12,0,1183,272,1,0,0,0,1184,1185,5,47,0,0,1185,1186,5,
62,0,0,1186,1187,1,0,0,0,1187,1188,6,134,4,0,1188,274,1,0,0,0,1189,1190,
5,61,0,0,1190,276,1,0,0,0,1191,1192,5,123,0,0,1192,1193,6,136,13,0,1193,
1194,1,0,0,0,1194,1195,6,136,2,0,1195,278,1,0,0,0,1196,1200,3,319,157,0,
1197,1199,3,321,158,0,1198,1197,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,
0,0,1200,1201,1,0,0,0,1201,280,1,0,0,0,1202,1200,1,0,0,0,1203,1205,7,12,
0,0,1204,1203,1,0,0,0,1205,1206,1,0,0,0,1206,1204,1,0,0,0,1206,1207,1,0,
0,0,1207,1208,1,0,0,0,1208,1209,6,138,8,0,1209,282,1,0,0,0,1210,1211,7,0,
0,0,1211,1212,1,0,0,0,1212,1213,6,139,8,0,1213,284,1,0,0,0,1214,1215,5,47,
0,0,1215,1216,5,42,0,0,1216,1220,1,0,0,0,1217,1219,9,0,0,0,1218,1217,1,0,
0,0,1219,1222,1,0,0,0,1220,1221,1,0,0,0,1220,1218,1,0,0,0,1221,1223,1,0,
0,0,1222,1220,1,0,0,0,1223,1224,5,42,0,0,1224,1225,5,47,0,0,1225,1226,1,
0,0,0,1226,1227,6,140,8,0,1227,286,1,0,0,0,1228,1229,5,47,0,0,1229,1230,
5,47,0,0,1230,1234,1,0,0,0,1231,1233,8,0,0,0,1232,1231,1,0,0,0,1233,1236,
1,0,0,0,1234,1232,1,0,0,0,1234,1235,1,0,0,0,1235,1237,1,0,0,0,1236,1234,
1,0,0,0,1237,1238,6,141,8,0,1238,288,1,0,0,0,1239,1245,3,315,155,0,1240,
1245,3,317,156,0,1241,1245,3,307,151,0,1242,1245,3,311,153,0,1243,1245,3,
313,154,0,1244,1239,1,0,0,0,1244,1240,1,0,0,0,1244,1241,1,0,0,0,1244,1242,
1,0,0,0,1244,1243,1,0,0,0,1245,290,1,0,0,0,1246,1248,8,14,0,0,1247,1246,
1,0,0,0,1248,1249,1,0,0,0,1249,1247,1,0,0,0,1249,1250,1,0,0,0,1250,292,1,
0,0,0,1251,1252,5,60,0,0,1252,1253,1,0,0,0,1253,1254,6,144,0,0,1254,294,
1,0,0,0,1255,1256,5,60,0,0,1256,1257,5,47,0,0,1257,1258,1,0,0,0,1258,1259,
6,145,4,0,1259,1260,6,145,14,0,1260,296,1,0,0,0,1261,1262,5,123,0,0,1262,
1263,6,146,15,0,1263,1264,1,0,0,0,1264,1265,6,146,2,0,1265,298,1,0,0,0,1266,
1267,5,62,0,0,1267,1268,1,0,0,0,1268,1269,6,147,4,0,1269,300,1,0,0,0,1270,
1274,3,319,157,0,1271,1273,3,321,158,0,1272,1271,1,0,0,0,1273,1276,1,0,0,
0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,302,1,0,0,0,1276,1274,1,0,0,0,
1277,1278,7,0,0,0,1278,1279,1,0,0,0,1279,1280,6,149,8,0,1280,304,1,0,0,0,
1281,1283,7,12,0,0,1282,1281,1,0,0,0,1283,1284,1,0,0,0,1284,1282,1,0,0,0,
1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1287,6,150,8,0,1287,306,1,0,0,0,
1288,1290,7,15,0,0,1289,1288,1,0,0,0,1290,308,1,0,0,0,1291,1293,3,307,151,
0,1292,1291,1,0,0,0,1293,1294,1,0,0,0,1294,1292,1,0,0,0,1294,1295,1,0,0,
0,1295,1297,1,0,0,0,1296,1298,5,32,0,0,1297,1296,1,0,0,0,1297,1298,1,0,0,
0,1298,310,1,0,0,0,1299,1301,5,35,0,0,1300,1302,7,4,0,0,1301,1300,1,0,0,
0,1302,1303,1,0,0,0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,312,1,0,0,0,
1305,1307,7,1,0,0,1306,1305,1,0,0,0,1307,1308,1,0,0,0,1308,1306,1,0,0,0,
1308,1309,1,0,0,0,1309,1311,1,0,0,0,1310,1312,5,37,0,0,1311,1310,1,0,0,0,
1311,1312,1,0,0,0,1312,314,1,0,0,0,1313,1317,5,34,0,0,1314,1316,8,16,0,0,
1315,1314,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,
1318,1320,1,0,0,0,1319,1317,1,0,0,0,1320,1321,5,34,0,0,1321,316,1,0,0,0,
1322,1326,5,39,0,0,1323,1325,8,17,0,0,1324,1323,1,0,0,0,1325,1328,1,0,0,
0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,1329,1,0,0,0,1328,1326,1,0,0,
0,1329,1330,5,39,0,0,1330,318,1,0,0,0,1331,1333,7,18,0,0,1332,1331,1,0,0,
0,1333,320,1,0,0,0,1334,1339,3,319,157,0,1335,1339,7,19,0,0,1336,1339,3,
323,159,0,1337,1339,7,20,0,0,1338,1334,1,0,0,0,1338,1335,1,0,0,0,1338,1336,
1,0,0,0,1338,1337,1,0,0,0,1339,322,1,0,0,0,1340,1341,7,1,0,0,1341,324,1,
0,0,0,1342,1347,8,21,0,0,1343,1344,5,92,0,0,1344,1347,3,329,162,0,1345,1347,
3,345,170,0,1346,1342,1,0,0,0,1346,1343,1,0,0,0,1346,1345,1,0,0,0,1347,326,
1,0,0,0,1348,1353,8,22,0,0,1349,1350,5,92,0,0,1350,1353,3,329,162,0,1351,
1353,3,345,170,0,1352,1348,1,0,0,0,1352,1349,1,0,0,0,1352,1351,1,0,0,0,1353,
328,1,0,0,0,1354,1360,3,331,163,0,1355,1360,5,48,0,0,1356,1360,3,333,164,
0,1357,1360,3,335,165,0,1358,1360,3,337,166,0,1359,1354,1,0,0,0,1359,1355,
1,0,0,0,1359,1356,1,0,0,0,1359,1357,1,0,0,0,1359,1358,1,0,0,0,1360,330,1,
0,0,0,1361,1364,3,339,167,0,1362,1364,3,341,168,0,1363,1361,1,0,0,0,1363,
1362,1,0,0,0,1364,332,1,0,0,0,1365,1366,5,120,0,0,1366,1367,3,347,171,0,
1367,1368,3,347,171,0,1368,334,1,0,0,0,1369,1370,5,117,0,0,1370,1371,3,347,
171,0,1371,1372,3,347,171,0,1372,1373,3,347,171,0,1373,1374,3,347,171,0,
1374,1386,1,0,0,0,1375,1376,5,117,0,0,1376,1377,5,123,0,0,1377,1379,3,347,
171,0,1378,1380,3,347,171,0,1379,1378,1,0,0,0,1380,1381,1,0,0,0,1381,1379,
1,0,0,0,1381,1382,1,0,0,0,1382,1383,1,0,0,0,1383,1384,5,125,0,0,1384,1386,
1,0,0,0,1385,1369,1,0,0,0,1385,1375,1,0,0,0,1386,336,1,0,0,0,1387,1388,5,
117,0,0,1388,1390,5,123,0,0,1389,1391,3,347,171,0,1390,1389,1,0,0,0,1391,
1392,1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,0,0,1394,
1395,5,125,0,0,1395,338,1,0,0,0,1396,1397,7,23,0,0,1397,340,1,0,0,0,1398,
1399,8,24,0,0,1399,342,1,0,0,0,1400,1403,3,339,167,0,1401,1403,7,25,0,0,
1402,1400,1,0,0,0,1402,1401,1,0,0,0,1403,344,1,0,0,0,1404,1405,5,92,0,0,
1405,1406,7,0,0,0,1406,346,1,0,0,0,1407,1408,7,26,0,0,1408,348,1,0,0,0,1409,
1418,5,48,0,0,1410,1414,7,27,0,0,1411,1413,7,2,0,0,1412,1411,1,0,0,0,1413,
1416,1,0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1418,1,0,0,0,1416,
1414,1,0,0,0,1417,1409,1,0,0,0,1417,1410,1,0,0,0,1418,350,1,0,0,0,1419,1421,
7,28,0,0,1420,1422,7,29,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1424,
1,0,0,0,1423,1425,7,2,0,0,1424,1423,1,0,0,0,1425,1426,1,0,0,0,1426,1424,
1,0,0,0,1426,1427,1,0,0,0,1427,352,1,0,0,0,1428,1431,3,355,175,0,1429,1431,
7,30,0,0,1430,1428,1,0,0,0,1430,1429,1,0,0,0,1431,354,1,0,0,0,1432,1436,
7,31,0,0,1433,1434,5,92,0,0,1434,1436,3,335,165,0,1435,1432,1,0,0,0,1435,
1433,1,0,0,0,1436,356,1,0,0,0,1437,1448,8,32,0,0,1438,1448,3,363,179,0,1439,
1443,5,91,0,0,1440,1442,3,361,178,0,1441,1440,1,0,0,0,1442,1445,1,0,0,0,
1443,1441,1,0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1443,1,0,0,0,
1446,1448,5,93,0,0,1447,1437,1,0,0,0,1447,1438,1,0,0,0,1447,1439,1,0,0,0,
1448,358,1,0,0,0,1449,1460,8,33,0,0,1450,1460,3,363,179,0,1451,1455,5,91,
0,0,1452,1454,3,361,178,0,1453,1452,1,0,0,0,1454,1457,1,0,0,0,1455,1453,
1,0,0,0,1455,1456,1,0,0,0,1456,1458,1,0,0,0,1457,1455,1,0,0,0,1458,1460,
5,93,0,0,1459,1449,1,0,0,0,1459,1450,1,0,0,0,1459,1451,1,0,0,0,1460,360,
1,0,0,0,1461,1464,8,34,0,0,1462,1464,3,363,179,0,1463,1461,1,0,0,0,1463,
1462,1,0,0,0,1464,362,1,0,0,0,1465,1466,5,92,0,0,1466,1467,8,0,0,0,1467,
364,1,0,0,0,73,0,1,2,3,4,372,546,554,558,565,569,573,575,583,590,600,609,
618,629,640,975,982,990,994,1004,1013,1022,1032,1047,1062,1076,1086,1094,
1105,1127,1153,1200,1206,1220,1234,1244,1249,1274,1284,1289,1294,1297,1303,
1308,1311,1317,1326,1332,1338,1346,1352,1359,1363,1381,1385,1392,1402,1414,
1417,1421,1426,1430,1435,1443,1447,1455,1459,1463,16,5,2,0,1,6,0,5,0,0,1,
7,1,4,0,0,1,116,2,1,118,3,5,1,0,0,1,0,0,2,0,1,129,4,7,119,0,5,3,0,1,136,
5,5,4,0,1,146,6];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class JavaScriptLexer extends JavaScriptLexerBase {

    static grammarFileName = "JavaScriptLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR" ];
	static modeNames = [ "DEFAULT_MODE", "TEMPLATE", "JSX_OPENING_ELEMENT", 
                      "JSX_CHILDREN", "JSX_CLOSING_ELEMENT" ];
	static literalNames = [ null, null, null, "'['", "']'", "'('", "')'", null, 
                         null, "';'", "','", null, "'?'", "':'", "'...'", 
                         "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                         "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", 
                         "'<<'", "'>>>'", null, null, "'<='", "'>='", "'=='", 
                         "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
                         "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", 
                         "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", 
                         "'|='", "'**='", "'=>'", "'null'", null, null, 
                         null, null, null, null, null, null, null, null, 
                         "'break'", "'do'", "'instanceof'", "'typeof'", 
                         "'case'", "'else'", "'new'", "'var'", "'catch'", 
                         "'finally'", "'return'", "'void'", "'continue'", 
                         "'for'", "'switch'", "'while'", "'debugger'", "'function'", 
                         "'this'", "'with'", "'default'", "'if'", "'throw'", 
                         "'delete'", "'in'", "'try'", "'as'", "'from'", 
                         "'yield*'", "'class'", "'enum'", "'extends'", "'super'", 
                         "'const'", "'export'", "'import'", "'async'", "'await'", 
                         "'implements'", null, null, "'private'", "'public'", 
                         "'interface'", "'package'", "'protected'", "'static'", 
                         "'yield'", null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         "'${'", null, null, null, "'/>'", null, null, null, 
                         null, null, null, null, null, null, null, "'</'" ];
	static symbolicNames = [ null, "HashBangLine", "JsxElementBegin", "OpenBracket", 
                          "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
                          "CloseBrace", "SemiColon", "Comma", "Assign", 
                          "QuestionMark", "Colon", "Ellipsis", "Dot", "PlusPlus", 
                          "MinusMinus", "Plus", "Minus", "BitNot", "Not", 
                          "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", 
                          "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", 
                          "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
                          "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", 
                          "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", 
                          "And", "Or", "MultiplyAssign", "DivideAssign", 
                          "ModulusAssign", "PlusAssign", "MinusAssign", 
                          "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                          "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                          "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", 
                          "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                          "OctalIntegerLiteral", "OctalIntegerLiteral2", 
                          "BinaryIntegerLiteral", "BigHexIntegerLiteral", 
                          "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
                          "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", 
                          "Typeof", "Case", "Else", "New", "Var", "Catch", 
                          "Finally", "Return", "Void", "Continue", "For", 
                          "Switch", "While", "Debugger", "Function_", "This", 
                          "With", "Default", "If", "Throw", "Delete", "In", 
                          "Try", "As", "From", "YieldStar", "Class", "Enum", 
                          "Extends", "Super", "Const", "Export", "Import", 
                          "Async", "Await", "Implements", "StrictLet", "NonStrictLet", 
                          "Private", "Public", "Interface", "Package", "Protected", 
                          "Static", "Yield", "Identifier", "StringLiteral", 
                          "LinkLiteral", "BackTick", "WhiteSpaces", "LineTerminator", 
                          "JsxComment", "MultiLineComment", "SingleLineComment", 
                          "RegularExpressionLiteral", "HtmlComment", "CDataComment", 
                          "UnexpectedCharacter", "CDATA", "TemplateStringStartExpression", 
                          "TemplateStringAtom", "JsxOpeningElementBegin", 
                          "JsxOpeningElementEnd", "JsxOpeningElementSlashEnd", 
                          "JsxAssign", "JsxOpeningElementOpenBrace", "JsxOpeningElementId", 
                          "JsxOpeningElementWhiteSpaces", "JsxOpeningElementLineTerminator", 
                          "JsxOpeningElementMultiLineComment", "JsxOpeningElementSingleLineComment", 
                          "JsxAttributeValue", "HtmlChardata", "JsxChildrenOpeningElementBegin", 
                          "JsxChildrenClosingElementSlashBegin", "JsxChildrenOpenBrace", 
                          "JsxClosingElementEnd", "JsxClosingElementId", 
                          "JsxClosingElementLineTerminator", "JsxClosingElementWhiteSpaces" ];
	static ruleNames = [ "HashBangLine", "JsxElementBegin", "OpenBracket", 
                      "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
                      "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
                      "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
                      "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", 
                      "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                      "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
                      "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                      "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                      "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", 
                      "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                      "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                      "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                      "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                      "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                      "New", "Var", "Catch", "Finally", "Return", "Void", 
                      "Continue", "For", "Switch", "While", "Debugger", 
                      "Function_", "This", "With", "Default", "If", "Throw", 
                      "Delete", "In", "Try", "As", "From", "YieldStar", 
                      "Class", "Enum", "Extends", "Super", "Const", "Export", 
                      "Import", "Async", "Await", "Implements", "StrictLet", 
                      "NonStrictLet", "Private", "Public", "Interface", 
                      "Package", "Protected", "Static", "Yield", "Identifier", 
                      "StringLiteral", "LinkLiteral", "BackTick", "WhiteSpaces", 
                      "LineTerminator", "JsxComment", "MultiLineComment", 
                      "SingleLineComment", "RegularExpressionLiteral", "HtmlComment", 
                      "CDataComment", "UnexpectedCharacter", "CDATA", "BackTickInside", 
                      "TemplateStringStartExpression", "TemplateStringAtom", 
                      "JsxOpeningElementBegin", "JsxOpeningElementEnd", 
                      "JsxOpeningElementSlashEnd", "JsxAssign", "JsxOpeningElementOpenBrace", 
                      "JsxOpeningElementId", "JsxOpeningElementWhiteSpaces", 
                      "JsxOpeningElementLineTerminator", "JsxOpeningElementMultiLineComment", 
                      "JsxOpeningElementSingleLineComment", "JsxAttributeValue", 
                      "HtmlChardata", "JsxChildrenOpeningElementBegin", 
                      "JsxChildrenClosingElementSlashBegin", "JsxChildrenOpenBrace", 
                      "JsxClosingElementEnd", "JsxClosingElementId", "JsxClosingElementLineTerminator", 
                      "JsxClosingElementWhiteSpaces", "AttributeChar", "AttributeChars", 
                      "HexChars", "DecChars", "DoubleQuoteString", "SingleQuoteString", 
                      "TagNameStartChar", "TagNameChar", "Digit", "DoubleStringCharacter", 
                      "SingleStringCharacter", "EscapeSequence", "CharacterEscapeSequence", 
                      "HexEscapeSequence", "UnicodeEscapeSequence", "ExtendedUnicodeEscapeSequence", 
                      "SingleEscapeCharacter", "NonEscapeCharacter", "EscapeCharacter", 
                      "LineContinuation", "HexDigit", "DecimalIntegerLiteral", 
                      "ExponentPart", "IdentifierPart", "IdentifierStart", 
                      "RegularExpressionFirstChar", "RegularExpressionChar", 
                      "RegularExpressionClassChar", "RegularExpressionBackslashSequence" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

JavaScriptLexer.EOF = antlr4.Token.EOF;
JavaScriptLexer.HashBangLine = 1;
JavaScriptLexer.JsxElementBegin = 2;
JavaScriptLexer.OpenBracket = 3;
JavaScriptLexer.CloseBracket = 4;
JavaScriptLexer.OpenParen = 5;
JavaScriptLexer.CloseParen = 6;
JavaScriptLexer.OpenBrace = 7;
JavaScriptLexer.CloseBrace = 8;
JavaScriptLexer.SemiColon = 9;
JavaScriptLexer.Comma = 10;
JavaScriptLexer.Assign = 11;
JavaScriptLexer.QuestionMark = 12;
JavaScriptLexer.Colon = 13;
JavaScriptLexer.Ellipsis = 14;
JavaScriptLexer.Dot = 15;
JavaScriptLexer.PlusPlus = 16;
JavaScriptLexer.MinusMinus = 17;
JavaScriptLexer.Plus = 18;
JavaScriptLexer.Minus = 19;
JavaScriptLexer.BitNot = 20;
JavaScriptLexer.Not = 21;
JavaScriptLexer.Multiply = 22;
JavaScriptLexer.Divide = 23;
JavaScriptLexer.Modulus = 24;
JavaScriptLexer.Power = 25;
JavaScriptLexer.NullCoalesce = 26;
JavaScriptLexer.Hashtag = 27;
JavaScriptLexer.RightShiftArithmetic = 28;
JavaScriptLexer.LeftShiftArithmetic = 29;
JavaScriptLexer.RightShiftLogical = 30;
JavaScriptLexer.LessThan = 31;
JavaScriptLexer.MoreThan = 32;
JavaScriptLexer.LessThanEquals = 33;
JavaScriptLexer.GreaterThanEquals = 34;
JavaScriptLexer.Equals_ = 35;
JavaScriptLexer.NotEquals = 36;
JavaScriptLexer.IdentityEquals = 37;
JavaScriptLexer.IdentityNotEquals = 38;
JavaScriptLexer.BitAnd = 39;
JavaScriptLexer.BitXOr = 40;
JavaScriptLexer.BitOr = 41;
JavaScriptLexer.And = 42;
JavaScriptLexer.Or = 43;
JavaScriptLexer.MultiplyAssign = 44;
JavaScriptLexer.DivideAssign = 45;
JavaScriptLexer.ModulusAssign = 46;
JavaScriptLexer.PlusAssign = 47;
JavaScriptLexer.MinusAssign = 48;
JavaScriptLexer.LeftShiftArithmeticAssign = 49;
JavaScriptLexer.RightShiftArithmeticAssign = 50;
JavaScriptLexer.RightShiftLogicalAssign = 51;
JavaScriptLexer.BitAndAssign = 52;
JavaScriptLexer.BitXorAssign = 53;
JavaScriptLexer.BitOrAssign = 54;
JavaScriptLexer.PowerAssign = 55;
JavaScriptLexer.ARROW = 56;
JavaScriptLexer.NullLiteral = 57;
JavaScriptLexer.BooleanLiteral = 58;
JavaScriptLexer.DecimalLiteral = 59;
JavaScriptLexer.HexIntegerLiteral = 60;
JavaScriptLexer.OctalIntegerLiteral = 61;
JavaScriptLexer.OctalIntegerLiteral2 = 62;
JavaScriptLexer.BinaryIntegerLiteral = 63;
JavaScriptLexer.BigHexIntegerLiteral = 64;
JavaScriptLexer.BigOctalIntegerLiteral = 65;
JavaScriptLexer.BigBinaryIntegerLiteral = 66;
JavaScriptLexer.BigDecimalIntegerLiteral = 67;
JavaScriptLexer.Break = 68;
JavaScriptLexer.Do = 69;
JavaScriptLexer.Instanceof = 70;
JavaScriptLexer.Typeof = 71;
JavaScriptLexer.Case = 72;
JavaScriptLexer.Else = 73;
JavaScriptLexer.New = 74;
JavaScriptLexer.Var = 75;
JavaScriptLexer.Catch = 76;
JavaScriptLexer.Finally = 77;
JavaScriptLexer.Return = 78;
JavaScriptLexer.Void = 79;
JavaScriptLexer.Continue = 80;
JavaScriptLexer.For = 81;
JavaScriptLexer.Switch = 82;
JavaScriptLexer.While = 83;
JavaScriptLexer.Debugger = 84;
JavaScriptLexer.Function_ = 85;
JavaScriptLexer.This = 86;
JavaScriptLexer.With = 87;
JavaScriptLexer.Default = 88;
JavaScriptLexer.If = 89;
JavaScriptLexer.Throw = 90;
JavaScriptLexer.Delete = 91;
JavaScriptLexer.In = 92;
JavaScriptLexer.Try = 93;
JavaScriptLexer.As = 94;
JavaScriptLexer.From = 95;
JavaScriptLexer.YieldStar = 96;
JavaScriptLexer.Class = 97;
JavaScriptLexer.Enum = 98;
JavaScriptLexer.Extends = 99;
JavaScriptLexer.Super = 100;
JavaScriptLexer.Const = 101;
JavaScriptLexer.Export = 102;
JavaScriptLexer.Import = 103;
JavaScriptLexer.Async = 104;
JavaScriptLexer.Await = 105;
JavaScriptLexer.Implements = 106;
JavaScriptLexer.StrictLet = 107;
JavaScriptLexer.NonStrictLet = 108;
JavaScriptLexer.Private = 109;
JavaScriptLexer.Public = 110;
JavaScriptLexer.Interface = 111;
JavaScriptLexer.Package = 112;
JavaScriptLexer.Protected = 113;
JavaScriptLexer.Static = 114;
JavaScriptLexer.Yield = 115;
JavaScriptLexer.Identifier = 116;
JavaScriptLexer.StringLiteral = 117;
JavaScriptLexer.LinkLiteral = 118;
JavaScriptLexer.BackTick = 119;
JavaScriptLexer.WhiteSpaces = 120;
JavaScriptLexer.LineTerminator = 121;
JavaScriptLexer.JsxComment = 122;
JavaScriptLexer.MultiLineComment = 123;
JavaScriptLexer.SingleLineComment = 124;
JavaScriptLexer.RegularExpressionLiteral = 125;
JavaScriptLexer.HtmlComment = 126;
JavaScriptLexer.CDataComment = 127;
JavaScriptLexer.UnexpectedCharacter = 128;
JavaScriptLexer.CDATA = 129;
JavaScriptLexer.TemplateStringStartExpression = 130;
JavaScriptLexer.TemplateStringAtom = 131;
JavaScriptLexer.JsxOpeningElementBegin = 132;
JavaScriptLexer.JsxOpeningElementEnd = 133;
JavaScriptLexer.JsxOpeningElementSlashEnd = 134;
JavaScriptLexer.JsxAssign = 135;
JavaScriptLexer.JsxOpeningElementOpenBrace = 136;
JavaScriptLexer.JsxOpeningElementId = 137;
JavaScriptLexer.JsxOpeningElementWhiteSpaces = 138;
JavaScriptLexer.JsxOpeningElementLineTerminator = 139;
JavaScriptLexer.JsxOpeningElementMultiLineComment = 140;
JavaScriptLexer.JsxOpeningElementSingleLineComment = 141;
JavaScriptLexer.JsxAttributeValue = 142;
JavaScriptLexer.HtmlChardata = 143;
JavaScriptLexer.JsxChildrenOpeningElementBegin = 144;
JavaScriptLexer.JsxChildrenClosingElementSlashBegin = 145;
JavaScriptLexer.JsxChildrenOpenBrace = 146;
JavaScriptLexer.JsxClosingElementEnd = 147;
JavaScriptLexer.JsxClosingElementId = 148;
JavaScriptLexer.JsxClosingElementLineTerminator = 149;
JavaScriptLexer.JsxClosingElementWhiteSpaces = 150;

JavaScriptLexer.ERROR = 2;

JavaScriptLexer.TEMPLATE = 1;
JavaScriptLexer.JSX_OPENING_ELEMENT = 2;
JavaScriptLexer.JSX_CHILDREN = 3;
JavaScriptLexer.JSX_CLOSING_ELEMENT = 4;


JavaScriptLexer.prototype.action = function(localctx, ruleIndex, actionIndex) {
	switch (ruleIndex) {
	case 6:
		this.OpenBrace_action(localctx, actionIndex);
		break;
	case 7:
		this.CloseBrace_action(localctx, actionIndex);
		break;
	case 116:
		this.StringLiteral_action(localctx, actionIndex);
		break;
	case 118:
		this.BackTick_action(localctx, actionIndex);
		break;
	case 129:
		this.BackTickInside_action(localctx, actionIndex);
		break;
	case 136:
		this.JsxOpeningElementOpenBrace_action(localctx, actionIndex);
		break;
	case 146:
		this.JsxChildrenOpenBrace_action(localctx, actionIndex);
		break;
	default:
		throw "No registered action for:" + ruleIndex;
	}
};


JavaScriptLexer.prototype.OpenBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 0:
		this.ProcessOpenBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.CloseBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 1:
		this.ProcessCloseBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.StringLiteral_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 2:
		this.ProcessStringLiteral();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.BackTick_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 3:
		this.IncreaseTemplateDepth();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.BackTickInside_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 4:
		this.DecreaseTemplateDepth();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.JsxOpeningElementOpenBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 5:
		this.ProcessOpenBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.JsxChildrenOpenBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 6:
		this.ProcessOpenBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};
JavaScriptLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 0:
			return this.HashBangLine_sempred(localctx, predIndex);
		case 1:
			return this.JsxElementBegin_sempred(localctx, predIndex);
		case 60:
			return this.OctalIntegerLiteral_sempred(localctx, predIndex);
		case 105:
			return this.Implements_sempred(localctx, predIndex);
		case 106:
			return this.StrictLet_sempred(localctx, predIndex);
		case 107:
			return this.NonStrictLet_sempred(localctx, predIndex);
		case 108:
			return this.Private_sempred(localctx, predIndex);
		case 109:
			return this.Public_sempred(localctx, predIndex);
		case 110:
			return this.Interface_sempred(localctx, predIndex);
		case 111:
			return this.Package_sempred(localctx, predIndex);
		case 112:
			return this.Protected_sempred(localctx, predIndex);
		case 113:
			return this.Static_sempred(localctx, predIndex);
		case 114:
			return this.Yield_sempred(localctx, predIndex);
		case 124:
			return this.RegularExpressionLiteral_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

JavaScriptLexer.prototype.HashBangLine_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return  this.IsStartOfFile();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.JsxElementBegin_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.IsJsxPossible();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.OctalIntegerLiteral_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return !this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Implements_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.StrictLet_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.NonStrictLet_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return !this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Private_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Public_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Interface_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Package_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Protected_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Static_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Yield_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.RegularExpressionLiteral_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 13:
			return this.IsRegexPossible();
		default:
			throw "No predicate with index:" + predIndex;
	}
};




